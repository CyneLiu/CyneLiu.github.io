<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python入门]]></title>
    <url>%2F2018%2F04%2F10%2FPython%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Linux入门]]></title>
    <url>%2F2018%2F04%2F10%2FLinux%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[VIM保存退出 按ESC键 跳到命令模式，然后： :w 保存文件但不退出vi:w file 将修改另外保存到file中，不退出vi:w! 强制保存，不推出vi:wq 保存文件并退出vi:wq! 强制保存文件，并退出vi_q:_ 不保存文件，退出vi:q! 不保存文件，强制退出vi:e! 放弃所有修改，从上次保存文件开始再编辑]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MathorCup数学建模参赛心得]]></title>
    <url>%2F2018%2F04%2F07%2FMathorCup%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%8F%82%E8%B5%9B%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[应班里同学邀请在今年清明节假期参加了第八届MathorCup数学建模挑战赛，也让我一个学渣终于明白了什么是数学建模了。在比赛之前，还三分钟热血的在很多网站和论坛找了不少关于数学建模的教程和资源，看了之后发现全是数学公式，然后我就果断的放弃了，把建模用到的SPSS和Matlab装上之后然后就放弃挣扎了，想着当个咸鱼依靠队友吧。比赛开始看到题的那一刻我真的更懵逼了，C题是一个陆基导弹打击航母的题，看了好几遍也没有思路。D题感觉还好点，是数据分析题，因为之前涉猎过这方面的东西，至少心里还有点数。但是我们最后决定并没有做D题，而是选择了没有思路的C题，因为我们三个人都觉得反正人很多，大神也多，就算做我们会做的D题也比不过人家，就索性做了C题。第一天上午决定了选题之后还找了一些相关的论文资料，但是我心里还是不清楚应该做什么。到了下午，等一个有比赛精力的队友写出第一个问题，我看过之后终于清楚是怎么一回事，就是把相关的模型往上扯，因为实在是不会做。就这样，我也走上了“编瞎话”的道路……虽说是编瞎话，但也不能说容易，三个人分工合作终于在第二天把论文给编出来了，心里也是小有成就感。因为排版只能一个人做，第三天上午我就自己开始排版，这次排版也学会了不少word的使用技巧，所以说还是有收获。一上午的时间差不多就已经完成了。下午我们三个人又修改完善了一下，完整的论文也就成型了，然而查了一下重百分之六十多的相似度，不过倒也正常，毕竟摘录了那么多东西，这已经不能算高了，之后又先后修改了两遍，终稿重复率百分之四十多。通过这次数学建模比赛，怎么说，有些许收获，最主要的还是了解了一下数学建模是干嘛的吧。趁热打铁又跟别人组队参加了下个周末比赛的认证杯，不求自己干点什么，跟比赛混个脸熟吧。]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>数学建模 MathorCup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MATLAB学习笔记]]></title>
    <url>%2F2018%2F04%2F03%2FMATLAB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装Excel Link我学习的教程是卓金武的《MATLAB在数学建模中的应用》，书中在说明Excel Link的安装时，针对的是较早版本的office，百度也没有找到针对新版本的教程，自己摸索了一会是在加载项中添加，找不到这个功能的话可以直接搜索，然后把Excel Link勾选添加进去即可。如果没有此项，就需要手动添加，点击浏览，找到MATLAB安装目录下的toolbox\exlink\exlink.xla文件，然后再添加就可以了。安装需要一小段时间，安装完成后菜单栏会出现MATLAB按钮。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>matlab</tag>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创新创业大赛记录]]></title>
    <url>%2F2018%2F03%2F26%2F%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[3-26组队首先得感谢我们班长找到我给我这次参加创新创业大赛的机会，因为时间比较紧30号就得上交材料，组队页很快完成。队里老师给请来一个经验比较丰富的学长，一听人家说出的话，就瞬间感觉出差距了。首先创新创业大赛，创新就是创意，倒不一定要落地实施，但是一定要有创新，不能说人家已经做的很成熟的方向我们再拿出来去比赛；创业，就显得更加实际，不但要有成型的产品，更好有已经形成的市场和客户，这才能叫做创业。我也是像个小萌新一样从头听到尾，收获和感触颇多。 3-27第一天准备昨天商量出具体的创新方向之后，那就得开始干活了，我是负责网站前台的，说实话自己一个人还真挺头疼的，毕竟时间这么紧，真怕给他们拖后腿。好在提前捋清楚了思路，网页做起来也就顺水推舟了。一天的时间忙下来还真没感觉到累，反而感觉这样的一天很充实很有意义，看看身边的大佬，好多比我低一级的学弟，想想当时的我还沉浸在游戏中无法自拔就感觉很悲哀。比不过人家也是正常，因为没有别人那样努力，好在还不是那么晚，加油吧。 3-28第二天今天他们整理的文档差不多也已经成型了，我的前台网页做的也差不多了，因为只是做一个表皮，具体的内容不需要写很多，瞬间就感觉轻松了不少，明天就是收尾阶段的。大家都很努力，进度也超过预期，还是很充实的一天。 3-29第三天收尾现在是3-30的00:10了，按老师要求把设计思路过程还有产品功能写完了，既没有感觉到困也没有觉得累，还是要说这样的生活很充实吧。而且找了一个百度文库里的一篇网站策划，虽然内容跟我们的需求不一样但是提供了整体的思路，没有这个策划之前真不知道该如何下手不得不说人家写的很全面。 ①网站名称②主题思想③网站策划书④网页制作步骤⑤后期调试 主要就是这几个方面吧，写完之后还是有不少收获的。 3-30整合提交材料五个人忙了差不都一个周，终于把材料赶出来了，好在终于走上了参加比赛的正轨，我们三个也就算正式组队了。 补充哈哈 前几天知道这个比赛的全名——“浩方杯”全国高校商业精英挑战赛因为刚组队，所有的资料都是刚开始写，前前后后这件事情一直没断过，也用这个作品报名了很多类似的创新比赛，期待都能取得一个满意的成绩。 #济南省赛地点：山东英才学院时间：2018.05.045月3号坐校车出发去济南，住在济南职业学院里的一个宾馆，别说人家职业学院都比我们学校大，不过也并不是很羡慕，相反这次出去比赛也让我感受到了我们学校的强大，首先好像只有我们是带着车去的，来来回回的都很方便，连黄岛的都很羡慕，还有就是英才的美化还是比较不错的，但是水餐里的饭不怎么样，还不如济南职业学院的好吃。说正事，这次比赛之前并没有感到很紧张，就是下午比赛前紧张有点，不得不说现在心态比以前好很多了，要放在以前头一天可能就开始紧张了。在答辩过程中也出现了一点小插曲，视频卡顿了，之前就知道视频有问题，但是因为比赛在即，视频是比赛前重录的，所以已经来不及改了，但是没想到的是比赛时无法播放，当时真的很慌。好在虽然出现了小插曲但最后的成绩还不错，拿了省一等奖，也算是对得起自己前一阶段的付出了，也让我们的首战打出了不错的成绩。老师说的很对，出现问题还是自己准备的不够充足，不能怪别人，这都是经验，也是这次比赛最重要的东西，加油！相信下次会更好。]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>大学，比赛，创新创业大赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的str.format]]></title>
    <url>%2F2018%2F03%2F25%2FPython%E4%B8%AD%E7%9A%84str-format%2F</url>
    <content type="text"><![CDATA[str.format 的引入在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不从心了。例如，我们想打印这样一条记录： User:John has completed Action:payment at Time:13:30:00 如果使用加号实现，会是下面这种形式： print &quot;User:&quot; + user_name + &quot; has completed Action:&quot; + \ action_name + &quot; at Time:&quot; + current_time 如果以后回过头来阅读这段代码，我们很难直观看出它的输出格式，且修改起来也相对麻烦。我们可以换用 % 来实现： print &quot;User:%s has completed Action:%s at Time:%s&quot; %\ (user_name, action_name, current_time) 这回代码变得清晰简洁多了。不过，Python 为我们提供了另一种简洁优雅的实现方式，也是官方更加推荐的方式：&nbsp;&nbsp;&nbsp;&nbsp;使用 str.format() 来实现字符串的格式化： print &quot;User:{} has completed Action:{} at Time:{}&quot;.format( user_name, action_name, current_time) str.format 既能够用于简单的场景，也能够胜任复杂的字符串替换，而无需繁琐的字符串连接操作。Python 的内置类型 str 和 unicode 均支持使用 str.format() 来格式化字符串。我们接下来就详细地讨论 str.format() 的具体用法。 str.format 基本语法格式化字符串使用花括号 {} 来包围替换字段，也就是待替换的字符串。而未被花括号包围的字符会原封不动地出现在结果中。 使用位置索引以下两种写法是等价的：“Hello, {} and {}!”.format(“John”, “Mary”)“Hello, {0} and {1}!”.format(“John”, “Mary”)花括号内部可以写上目标字符串的索引，也可以省略。如果省略，则按 format 括号里的目标字符串顺序依次替换。 使用关键字索引除了通过位置来指定目标字符串，我们还可以通过关键字来指定它。例如： “Hello, {boy} and {girl}!”.format(boy=”John”, girl=”Mary”) 使用关键字索引的好处是，我们无需关心参数的位置，且字符串的最终结果能够一目了然。在以后的代码维护中，我们能够快速地修改对应的参数，而不用对照字符串挨个去寻找相应的参数。注意：如果字符串本身含有花括号，则需要将其重复两次来转义。例如，字符串本身含有 &#123; ，为了让 Python 知道这是一个普通字符，而不是用于包围替换字段的花括号，我们只需将它改写成 &#123;&#123; 即可。 str.format 高级语法str.format 非常强大，足以完成日常工作中遇到的格式化输出。熟练掌握该方法，能够为以后的字符串处理打好基础，还能节省不少时间。 访问参数的属性或元素在使用 str.format 来格式化字符串时，我们通常将目标字符串作为参数传递给 format 方法。实际上，我们还可以在格式化字符串中访问参数的某个属性或某个元素： &quot;My car is {0.color}.&quot;.format(black_car) &quot;The first student is {student[0]}.&quot;.format(student=stu_list) &quot;John is {d[john]} years old.&quot;.format(d=age_dict) 参数输出转换参数的字符串输出，默认是由其自身的 format 方法来实现的。也就是说Python 使用参数的 format 输出来取代替换字段。如果我们想调用 str() 或 repr() 来转换参数，可以通过添加转换标志来实现： call str() on argument &quot;It&apos;s a {0!s}.&quot; call repr() on argument &quot;We can get info from {name!r}.&quot; str.format 一般形式格式化字符串的一般形式如下： &quot;... {field_name!conversion:format_spec} ...&quot; 从上面的代码可以看到，格式化字符串可分为 field_name、conversion、format_spec 三部分，分别对应替换字段名称（索引）、转换标志、格式描述。其中，字段名称是必选的，而后两者是可选的。转换标志紧跟在英文感叹号后面，而格式描述紧跟在英文冒号后面。前面已经提到过，字段名称既可是位置索引，也可是关键字索引。字段名称后面可以通过点来访问属性，或通过方括号来访问元素。在这里，我们重点看一下格式描述（format_spec）这一项。格式描述中含有6个选项，分别是 fill、align、sign、width、precision、type。 它们的位置关系如下： [[fill]align][sign][#][0][width][,][.precision][type] fill 可以是任意字符，默认为空格。align 仅当指定最小宽度时有效。&lt; 左对齐（默认选项）“&gt;” 右对齐= 仅对数字有效；将填充字符放到符号与数字间，例如 +0001234^ 居中对齐sign仅对数字有效 所有数字均带有符号 仅负数带有符号（默认选项）&nbsp;即空格；正数前面带空格，负数前面带符号‘#’ 只对整数有效自动在二进制、八进制、十六进制数值前添加对应的 0b、0o、 0x。‘,’自动在每三个数字之间添加 , 分隔符。width十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。如果没有指定对齐方式（align），那么可以在 width 前面添加一个0来实现自动填充0，等价于 fill 设为 0 并且 align 设为 =。precision用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。type确定参数类型，默认为 s ，即字符串。整数输出类型： b：以二进制格式输出c：将整数转换成对应的 unicode 字符d：以十进制输出（默认选项）o：以八进制输出x：以十六进制小写输出X：以十六进制大写输出n：与 d 相同，但使用当前环境的分隔符来分隔每3位数字十进制浮点数输出类型：e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为6E：与 e 相同，但使用大写 E 来表示指数部分f：以定点形式输出数值，默认 precision 为6F：与 f 相同g：通用格式；对于给定的 precision p &gt;= 1，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分n：与 g 相同，但使用当前环境的分隔符来分隔每3位数字%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo建站记录]]></title>
    <url>%2F2018%2F03%2F03%2Fhexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[建站过程在遇到各种各样问题之后，终于搭建完成了这个博客。 其实回过头看看也并不是很麻烦，只是遇到了许多问题，有些是因为设备环境的问题，比如在测试“ssh -T git@github.com“这条命令时，一直提示”bad address“错误，让人很费解，重装环境重新来过还是报错，只好最后换了一台电脑就没有出现这个错误。当然经验证这个并不会影响整个博客的搭建，只要密钥复制的正确这些都不碍事。 还有一个问题是因为教程的问题，在修改主配置文件的“deploy”部署时，教程写的是https地址，我也是多次尝试也没成功，最后百度到原因写ssh地址就可以解决。当然也不能一概而论，若没有错误还是推荐使用https地址。 一个个的小地方就让我走了不少的弯路。最后终于找到一个比较详细准确的教程，在此分享给大家，在这也感谢作者Line, 无意侵犯作者原作，只是想让像我这样的小白少走些弯路。作者博客中有五篇关于hexo使用的教程，个人觉得比较适合小白看。 这就是这次建站的一些小心得，水平有限有什么说的不对的地方也感谢各位不吝赐教。 #后期添加： 一、添加网易云音乐插件 在别人的博客看到了这样一个音乐插件，实现很简单，打开网易云音乐网页版，选择自己想要分享的歌单，然后点击生成外链播放器即可，插件分为两种形式：iframe插件和flash插件，可根据情况选择。 二、添加particles.js背景动画 particles.js是一个粒子效果的js插件，在Github里可以找到这个项目的源码，但是百度了一下配置方法大多是在html中实现，反正我是小白，不知道怎么修改。回归正题，怎么在Hexo中实现particles.js效果呢？1.首先在\themes\next\layout\_layout.swig的&lt; /body &gt;标签上面添加 {% if theme.canvas_nest %} {% endif %} 2.在\themes\next\_config.yml中添加以下字段开启此功能： # background settings # add canvas-nest effect # see detail from https://github.com/hustcc/canvas-nest.js canvas_nest: true 3.这样动态效果就添加成功了，你会发现博客默认的白色背景遮挡了大部分区域使得只有边缘能看见动态效果，这时候只要修改一下背景颜色即可。在\themes\next\source\css\_schemes\Pisces_layout.styl中，把.content-wrap中的background修改为none，注意我这里使用的是Pisces主题，如果你使用的是别的主题，在相应路径下修改即可。这样如果用手机打开体验会比较差，我们单独设置一下手机，把.content-wrap的+mobile()中的background修改为white，这样手机端的体验就好很多，却又不影响电脑端的炫酷动画。 三、设置文章摘要 写出来的文章如果直接在首页全篇显示就比较别扭了，为了提高浏览体验，这时候就需要设置一下文章摘要了，我这里主要介绍三种方式。 1.在文章中使用&lt; !–more–&gt; 这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。 2.在文章中的front-matter中添加description，并提供文章摘录。如图： 3.在主题配置文件中设置自动摘要 auto_excerpt: enable: true length: 150 #默认摘要为150字，可根据需要更改 官方文档： 文档|HexoNexT 错误汇总在使用hexo博客的过程中，遇到了如下一些错误： &#123; &#125;引起的报错今天写了一篇博客后按流程进行部署的时候，发现在生成静态页面的时候出现了如下的错误： 查了一下说什么的都有，每个方法也都试了一遍，最后发现是因为文章中直接引用了”&#123; &#125;”的原因，解决办法是将”&#123; &#125;”通过&amp;#123 &amp;#125后面加上分号”;”进行转换，就可以正常部署了。这里也有一些常见的特殊字符,可以根据需要转换。 标题无法正常解析在浏览别人的博客的时候发现Hexo有自动解析目录的功能，是依靠markdown的标题实现的，在加了一个“#标题”这样时却发现博客无法解析到这是一个标题，查了一下原因是正规的标题写法是在”#”和标题之间加一个空格。 换行一开始刚刚接触markdown的时候一直用html的&#60;br/&#62;换行，这种换行方式貌似在换行的同时增加了行间距，无意间发现一个更好也更简单的换行方式，就是在要换行的位置敲两个空格，就可以换行。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
