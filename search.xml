<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[虚拟化运维笔记]]></title>
    <url>%2F2018%2F06%2F25%2F%E8%99%9A%E6%8B%9F%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[UbuntuUbuntu设置静态ip通过修改“/etc/network/interfaces”进行修改，注：在设置多个DNS服务器的时候要加“s”,如： dns-nameservers 114.114.114.114 8.8.8.8 修改之后需要执行： sudo /etc/init.d/networking restart 重启网络。当然，如果是桌面版系统也可以直接在网络-编辑网络中进行设置。 安装TeamViewer1、到TeamViewer官网下载对应版本的安装包。2、下载完成之后切换到下载目录，执行： sudo dpkg -i teamviewer_13.0.9865_amd64.deb 版本号要根据下载的包进行更改。这时候可能会报出如下错误： 正在选中未选择的软件包 teamviewer。 (正在读取数据库 … 系统当前共安装有 253291 个文件和目录。) 正准备解包 teamviewer_13.0.6634_amd64.deb … 正在解包 teamviewer (13.0.6634) … dpkg：警告：无法删除原有的目录 /var/log/teamviewer12 ：目录非空 dpkg: 依赖关系问题使得 teamviewer 的配置工作不能继续： teamviewer 依赖于 qtdeclarative5-dialogs-plugin (&gt;= 5.2) | qml-module-qtquick-dialogs (&gt;= 5.2)；然而： 未安装软件包 qtdeclarative5-dialogs-plugin。 未安装软件包 qml-module-qtquick-dialogs。 dpkg: 处理软件包 teamviewer (–install)时出错： 依赖关系问题 - 仍未被配置 正在处理用于 desktop-file-utils (0.22-1ubuntu5.1) 的触发器 … 正在处理用于 gnome-menus (3.13.3-6ubuntu3.1) 的触发器 … 正在处理用于 bamfdaemon (0.5.3~bzr0+16.04.20160824-0ubuntu1) 的触发器 … Rebuilding /usr/share/applications/bamf-2.index… 正在处理用于 mime-support (3.59ubuntu1) 的触发器 … 正在处理用于 hicolor-icon-theme (0.15-0ubuntu1) 的触发器 … 在处理时有错误发生： teamviewer 目前我遇到的有两种解决方式：一、修复依赖关系 一种解决方法是执行如下命令修复依赖关系： sudo apt install f 执行完后再安装看看能否成功，如果还是不成功就要采用第二种方式了。二、更新源地址 ①删除安装到一半的teamviewer： sudo apt-get remove teamviewer ②在Ubuntu的源列表中找到对应系统的源，复制到/etc/apt/sources.list 里面，并把原来的链接注释掉。③更新系统软件： sudo apt-get update #更新软件列表 sudo apt-get upgrade #更新软件 ④运行安装命令： sudo dpkg -i teamviewer_13.0.9865_amd64.deb 3、在TeamViewer的使用中发现经常在系统重启后连接就出现“未知原因”的问题，原因还在摸索中，目前能解决的方法就是卸载重新安装： apt purge teamviewer sudo dpkg -i teamviewer_13.0.9865_amd64.deb 16.04出现“The system is running in low-graphics mode”在虚拟机中安装的Ubuntu16.04无法显示完全，尝试修改分辨率后会卡死，然后重启就会出现如题所示的错误。解决方法为：1、重启虚拟机，按ctrl + alt + F1 进入纯字符界面，输入账号和密码2、执行如下命令： cd /etc/X11 sudo cp xorg.conf.failsafe xorg.conf #刷新配置文件 sudo reboot 重启之后就可以正常显示了。 启用root用户 安装GNOME Shell桌面1、安装GNOME Shell sudo apt-get install gnome-shell 安装过程中出现如下界面，选择lightdm：2、退出当前账户，选择GNOME桌面系统3、重新登陆，安装gnome-tweak sudo apt-get install gnome-tweak-tool tweak是主题管理工具，具体使用方法参见：https://itsfoss.com/install-switch-themes-gnome-shell/ 4、使用tweak更换主题方法参考：https://itsfoss.com/gnome-shell-themes-ubuntu-1404/]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN入门（一）—— 环境搭建]]></title>
    <url>%2F2018%2F06%2F24%2FSDN%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Ubuntu安装系统选择镜像建议使用16.04的版本，mininet官网有说明，是因为16.04支持新版本的openflow等协议，我这里使用的是“ubuntu-16.04-server-amd64.iso”，server版本更加稳定。 虚拟机安装设置网卡因为要使用ssh远程登录，这里我们添加一个网卡：勾选“启用网络连接”，并选择仅主机模式。 系统安装挂载镜像之后启动虚拟机进行安装，基本的安装过程不一一详细介绍，不会的地方可以百度。可以看到安装程序已经识别出了两块网卡，我们选择默认的nat网卡作为主网络接口。软件安装，我们只需要安装ssh server就可以了，记得空格选择，回车确认。 安装完成后，我们看一下系统的网卡信息，发现并没有我们添加的网卡。执行“sudo dhclient enp0s8”启用enp0s8网卡。再次查看网卡信息：可以看到已经添加进来了。我们还需要将第二块网卡的配置加入到网络配置文件中，不然重启之后第二块网卡还是看不到的： sudo vi /etc/network/interfaces 在interfaces配置文件中加入enp0s8，同样使用dhcp方式获取ip至此，我们的系统就配置完成了，用ssh工具进行连接：已经可以成功连接。 安装Ryu详细内容可参考linton的博客。 1.下载python的套件库，并更新pip（因为下载的pip并不是最新版本） sudo apt-get install python-pip python-dev build-essential sudo pip install --upgrade pip 2.安装Ryu相依性套件 sudo apt-get install python-eventlet sudo apt-get install python-routes sudo apt-get install python-webob sudo apt-get install python-paramiko 3.使用pip下载并安装Ryu sudo pip install ryu 此步骤如果出现如下错误信息说明你被挡在城内了，富强上网即可解决。4.如果需要使用Ryu with GUI则进行此步骤：下载Ryu source code（需要使用git套件） sudo apt-get install git git clone https://github.com/osrg/ryu.git 5.完成安装，执行ryu-manager验证有没有出现错误，没问题的话会出现如下信息： 安装mininet使用源码安装mininet为了减少之后不必要的麻烦，建议在安装开始前执行：sudo su切换到root用户下并在富强网络下进行安装。1.升级系统 apt-get update apt-get upgrade 2.安装git（如果你像我一样在之前安装Ryu时我们已经安装过git了，那么请直接跳过此步骤） apt install git 3.从github上获取源码 git clone git://github.com/mininet/mininet 获取之后可以使用如下命令查看mininet的版本 cd mininet cat INSTALL 4.确认无误后，安装mininet util/install.sh -a 当你看到Enjoy Mininet！时，恭喜你已经安装成功了。执行以下命令查看安装版本： mn --version mininet可视化操作1.要进行mininet可视化操作，需要安装Xmanager套件，然后在通过Xshell远程连接主机时，在属性中做如下设置：2.然后进入examples目录，执行miniedit.py即可启动可视化界面 cd mininet/mininet/examples ./miniedit.py 至此，整个环境就搭建完成了。如果对环境的安装有疑问，欢迎与我联系，一起沟通交流。 email: 666@cyne.cf]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>SDN</tag>
        <tag>网工</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenStack入门（三）—— OpenStack架构]]></title>
    <url>%2F2018%2F06%2F19%2FOpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94-OpenStack%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[OpenStack架构OpenStack的Conceptual Architecture(概念体系结构)： 中间菱形是虚拟机，围绕 VM 的那些长方形代表 OpenStack 不同的模块（OpenStack 叫服务，后面都用服务这个术语），下面来分别介绍。 Nova：管理 VM 的生命周期，是 OpenStack 中最核心的服务。 Neutron：为 OpenStack 提供网络连接服务，负责创建和管理L2、L3 网络，为 VM 提供虚拟网络和物理网络连接。 Glance：管理 VM 的启动镜像，Nova 创建 VM 时将使用 Glance 提供的镜像。 Cinder：为 VM 提供块存储服务。Cinder 提供的每一个 Volume 在 VM 看来就是一块虚拟硬盘，一般用作数据盘。 Swift：提供对象存储服务。VM 可以通过 RESTful API 存放对象数据。作为可选的方案，Glance 可以将镜像存放在 Swift 中；Cinder 也可以将 Volume 备份到 Swift 中。 Keystone：为 OpenStack 的各种服务提供认证和权限管理服务。简单的说，OpenStack 上的每一个操作都必须通过 Keystone 的审核。 Ceilometer：提供 OpenStac k监控和计量服务，为报警、统计或计费提供数据。 Horizon：为 OpenStack 用户提供一个 Web 的自服务 Portal。 OpenStack的Logical Architecture（逻辑体系结构）： 搭建实验环境我们分两个节点进行环境部署：1.devstack-controller：控制节点 + 网络节点 + 块存储节点 + 计算节点2.devstack-compute：计算节点配置要求：网络规划：我们规划了三个网络： 1.Management Network： 用于 OpenStack 内部管理用，比如各服务之间通信。这里使用 eth0 2.VM（Tenant）Network： OpenStack 部署的虚拟机所使用的网络。OpenStack 支持多租户（Tenant），虚机是放在 Tenant 下的，所以叫 Tenant Network。这里使用 eth1 3.External Network： 一般来说，Tenant Network 是内部私有网络，只用于 VM 之间通信，与其他非 VM 网络是隔离的。这里我们规划了一个外部网络（External Network），通过 devstak-controller 的 eth2 连接。Neutron 通过 L3 服务让 VM 能够访问到 External Network。对于公有云，External Network 一般指的是 Internet。对于企业私有云，External Network 则可以是 Intranet 中的某个网络。 部署DevStack]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>网工</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenStack入门（二）—— 云计算]]></title>
    <url>%2F2018%2F06%2F19%2FOpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-%E4%BA%91%E8%AE%A1%E7%AE%97%2F</url>
    <content type="text"><![CDATA[基本概念这张图很形象的描述了云计算的基本概念：云平台是一个面向服务的架构，按照提供服务的不同分为 IaaS、PaaS 和 SaaS。IaaS（Infrastructure as a Service）提供的服务是虚拟机。 IaaS 负责管理虚机的生命周期，包括创建、修改、备份、启停、销毁等。使用者从云平台得到的是一个已经安装好镜像（操作系统+其他预装软件）的虚拟机。使用者需要关心虚机的类型（OS）和配置（CPU、内存、磁盘），并且自己负责部署上层的中间件和应用。IaaS 的使用者通常是数据中心的系统管理员。典型的 IaaS 例子有 AWS、Rackspace、阿里云等。 PaaS（Platform as a Service）提供的服务是应用的运行环境和一系列中间件服务（比如数据库、消息队列等）。 使用者只需专注应用的开发，并将自己的应用和数据部署到PaaS环境中。PaaS负责保证这些服务的可用性和性能。PaaS的使用者通常是应用的开发人员。典型的 PaaS 有 Google App Engine、IBM BlueMix 等 SaaS（Software as a Service）提供的是应用服务。 使用者只需要登录并使用应用，无需关心应用使用什么技术实现，也不需要关系应用部署在哪里。SaaS的使用者通常是应用的最终用户。典型的 SaaS 有 Google Gmail、Salesforce 等 云计算和OpenStackOpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface. 以上是官网对 OpenStack 的定义，OpenStack 对数据中心的计算、存储和网络资源进行统一管理。由此可见，OpenStack 针对的是 IT 基础设施，是 IaaS 这个层次的云操作系统。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>网工</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网址收藏]]></title>
    <url>%2F2018%2F06%2F07%2F%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F%2F</url>
    <content type="text"><![CDATA[软件激活PyCharm激活：http://idea.liyang.io/ 适用于所有intellij IDEA的激活 教程Java SE：天码营python3：廖雪峰OpenStack：每天五分钟玩转OpenStack]]></content>
      <categories>
        <category>网址收藏</category>
      </categories>
      <tags>
        <tag>网址收藏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenStack入门（一）—— 虚拟化]]></title>
    <url>%2F2018%2F06%2F06%2FOpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94-%E8%99%9A%E6%8B%9F%E5%8C%96%2F</url>
    <content type="text"><![CDATA[作为一个网络工程专业的大二学生，现在已经临近期末，也就是说马上就要大三了。最近身边的一些事，让我慢慢发现，如果以后只做一个普通的网工，只会敲敲命令行之类的，几乎没有什么前景，而且随着SDN、自动化运维的发展，普通网工的价值也显得越来越低，所以还是觉得应该学点别的东西来武装自己，比如——虚拟化。 今天在知乎上看了一些大佬的解答，感觉很受启发，网工可能真的是一个轻松的工作，但一个人的工资总是与创造的价值成正比的。虽然知道OpenStack体系结构复杂，知识涉及面庞大，但还是决定接触一下。今天也是无意间看到了一个名叫cloudman的博主的博客，他的这个系列教程《每天5分钟玩转OpenStack》个人感觉真的蛮不错，因为现在市面上真的很少有很体系化的教程（至少我没有找到），所以从今天开始就开始按照博主大佬的这份教程开始入门OpenStack了，也但愿我可以一路坚持下去。 虚拟化 这是博主给的图，如博主所说，OpenStack是云操作系统，要学习OpenStack，首先需要掌握一些虚拟化和云计算的相关知识。 物理机为宿主机Host，虚拟机为客户机Guest宿主机通过Hypervisor程序实现硬件的虚拟化根据实现方式分为1型虚拟化和2型虚拟化 1型虚拟化Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。 2型虚拟化物理机上首先安装常规的操作系统，Hypervisor 作为 OS 上的一个程序模块运行，并对管理虚拟机进行管理。 KVM基本概念因为在 x86 平台上最热门运用最广泛的虚拟化方案莫过于 KVM同时OpenStack对KVM支持的最好，所以实验环境选择KVM。 KVM是2型虚拟化KVM有一个内核模块交kvm.ko，只用于广利虚拟cpu和内存IO如存储和网络的虚拟化由Linux内核和Qemu实现Libvirt简单的说就是KVM的管理工具 安装KVM因为手头没有可以用的Linux系统的主机，所以这里我选择在VMWare虚拟机安装KVM。为了能让 KVM 能创建 嵌套的虚机，要把 CPU 的虚拟化功能打开：Ubuntu启动后，用一下命令确认cpu支持虚拟化： # egrep -o &apos;(vmx|svm)&apos; /proc/cpuinfo # vmx 确认 Libvirtd 服务已经启动: # service libvirt-bin status libvirt-bin start/running, process 1478 到这里KVM准备就绪。 几个小问题我在安装环境的时候遇到了以下两个小问题： 1.未发现软件包解决方法很简单，在命令行下执行： sudo apt-get update 更新apt的资源列表即可解决 2.ssh无法启动这个主要是因为我安装的Ubuntu在安装时并没有安装ssh-server，执行： sudo apt-get install openssh-server 安装ssh服务端程序即可解决。 3.Ubuntu缺少管理员权限无法打开文件 这个问题也是我用Ubuntu感觉不太方便的地方，百度了以下可以安装这个： sudo apt-get install nautilus-open-terminal 重启后，打开想要打开的目录执行： sudo nautilus 启动第一个KVM虚拟机启动虚机环境搭好，这个步骤就很简单了。要做笔记的可能就是博主推荐的用来测试效果的超轻量级的Linux系统cirros了，镜像文件只有几十兆。这是我的第一个KVM——kvm1，截个图纪念一下：另外除了用virt-manager对虚机进行各种管理操作，也可以使用命令 virsh管理虚机，比如查看宿主机上的虚机： root@ubuntu:~# virsh list Id Name State -------------------------------- 8 kvm1 running 远程管理虚机virt-manager也可以管理其它宿主机上的虚机，只需要将其添加进来就可以进行远程管理。因为 KVM（准确说是 Libvirt）默认不接受远程管理，需要按下面的内容配置被管理宿主机中的两个文件：/etc/default/libvirt-bin start_libvirtd=”yes”libvirtd_opts=”-d -l” /etc/libvirt/libvirtd.conf listen_tls = 0listen_tcp = 1unix_sock_group = “libvirtd”unix_sock_ro_perms = “0777”unix_sock_rw_perms = “0770”auth_unix_ro = “none”auth_unix_rw = “none”auth_tcp = “none” 然后重启 Libvirtd 服务就可以远程管理了。 service libvirt-bin restart KVM虚拟化原理 cpu虚拟化虚机中的每一个虚拟 vCPU 则对应 qemu-kvm 进程中的一个线程。在这个例子中，宿主机有两个物理 CPU，上面起了两个虚机 VM1 和 VM2。VM1 有两个 vCPU，VM2 有 4 个 vCPU。可以看到 VM1 和 VM2 分别有两个和 4 个线程在两个物理 CPU 上调度。这里也演示了另一个知识点，即虚机的 vCPU 总数可以超过物理 CPU 数量，这个叫 CPU overcommit（超配）。KVM 允许 overcommit，这个特性使得虚机能够充分利用宿主机的 CPU 资源，但前提是在同一时刻，不是所有的虚机都满负荷运行。当然，如果每个虚机都很忙，反而会影响整体性能，所以在使用 overcommit 的时候，需要对虚机的负载情况有所了解，需要测试。 内存虚拟化KVM 通过内存虚拟化共享物理系统内存，动态分配给虚拟机。为了在一台机器上运行多个虚拟机，KVM 需要实现 VA（虚拟内存） -&gt; PA（物理内存） -&gt; MA（机器内存）直接的地址转换。虚机 OS 控制虚拟地址到客户内存物理地址的映射 （VA -&gt; PA），但是虚机 OS 不能直接访问实际机器内存，因此 KVM 需要负责映射客户物理内存到实际机器内存 （PA -&gt; MA）。内存也是可以 overcommit 的，即所有虚机的内存之和可以超过宿主机的物理内存。但使用时也需要充分测试，否则性能会受影响。 存储虚拟化KVM 的存储虚拟化是通过存储池（Storage Pool）和卷（Volume）来管理的。Storage Pool 是宿主机上可以看到的一片存储空间，可以是多种类型，后面会详细讨论。Volume 是在 Storage Pool 中划分出的一块空间，宿主机将 Volume 分配给虚拟机，Volume 在虚拟机中看到的就是一块硬盘。 目录类型的 Storage Pool文件目录是最常用的 Storage Pool 类型。KVM 将宿主机目录 /var/lib/libvirt/images/ 作为默认的 Storage Pool。那么 Volume 是什么呢？答案就是该目录下面的文件了，一个文件就是一个 Volume。 为虚机 kvm1 添加一个新的磁盘，看看有什么变化。在 virt-manager 中打开 kvm1 的配置页面，右键添加新硬件在默认 Pool 中创建一个 8G 的卷。然后发现在 /var/lib/libvirt/images/ 下多了一个 8G 的文件 kvm1.img 使用文件做 Volume 有很多优点：存储方便、移植性好、可复制、可远程访问。前面几个优点都很好理解，这里对“可远程访问”多解释一下。远程访问的意思是镜像文件不一定都放置到宿主机本地文件系统中，也可以存储在通过网络连接的远程文件系统，比如 NFS，或者是分布式文件系统中，比如 GlusterFS。这样镜像文件就可以在多个宿主机之间共享，便于虚机在不同宿主机之间做 Live Migration；如果是分布式文件系统，多副本的特性还可以保证镜像文件的高可用。KVM 支持多种 Volume 文件格式，在添加 Volume 时可以选择： raw 是默认格式，即原始磁盘镜像格式，移植性好，性能好，但大小固定，不能节省磁盘空间。qcow2 是推荐使用的格式，cow 表示 copy on write，能够节省磁盘空间，支持 AES 加密，支持 zlib 压缩，支持多快照，功能很多。vmdk 是 VMWare 的虚拟磁盘格式，也就是说 VMWare 虚机可以直接在 KVM上 运行。 LVM类型的Storage Pool宿主机上 VG 中的 LV 也可以作为虚拟磁盘分配给虚拟机使用。不过，LV 由于没有磁盘的 MBR 引导记录，不能作为虚拟机的启动盘，只能作为数据盘使用。补充几个概念： 逻辑卷管理器—–LVM（Logicl Volume Manager） 通过使用逻辑卷管理器对硬盘存储设备进行管理，可以实现硬盘空间的动态划分和调整。 物理卷—–PV（Physical Volume） 物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘。 卷组——–VG（Volumne Group） 卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。 逻辑卷—–LV（Logical Volume） 逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组。 这种配置下，宿主机上的 VG 就是一个 Storage Pool，VG 中的 LV 就是 Volume。LV 的优点是有较好的性能；不足的地方是管理和移动性方面不如镜像文件，而且不能通过网络远程使用。 其他类型的Storage PoolKVM 还支持 iSCSI，Ceph 等多种类型的 Storage Pool。 网络虚拟化下面这个图是OpenStack官网给出的计算节点（可以理解为 KVM 的宿主机）虚拟网络的逻辑图： Linux Bridge基本概念给 VM1 分配一个虚拟网卡 vnet0，通过 Linux Bridge br0 将 eth0 和 vnet0 连接起来，如下图所示:Linux Bridge 是 Linux 上用来做 TCP/IP 二层协议交换的设备，其功能大家可以简单的理解为是一个二层交换机或者 Hub。多个网络设备可以连接到同一个 Linux Bridge，当某个设备收到数据包时，Linux Bridge 会将数据转发给其他设备。在上面这个例子中，当有数据到达 eth0 时，br0 会将数据转发给 vnet0，这样 VM1 就能接收到来自外网的数据；反过来，VM1 发送数据给 vnet0，br0 也会将数据转发到 eth0，从而实现了 VM1 与外网的通信。现在我们增加一个虚机 VM2，如下图所示:VM2 的虚拟网卡 vnet1 也连接到了 br0 上。现在 VM1 和 VM2 之间可以通信，同时 VM1 和 VM2 也都可以与外网通信。 动手实践虚拟网络配置Linux Bridge br0有两点需要注意： 1.之前宿主机的 IP 是通过 dhcp 配置在 eth0 上的；创建 Linux Bridge 之后，IP 就必须放到 br0 上了2.在 br0 的配置信息中请注意最后一行 “bridge_ports eth0”，其作用就是将 eth0 挂到 br0 上 小结配置过程很简单，有一个影响不大的小问题是我的interfaces文件不太一样，不过按照博主的配置，虽然写的多了一点，但不影响效果。最后附一张成功的截图，学习的乐趣也就在于这种满足感吧，哈哈。 理解virbr0 1.virbr0 是 KVM 默认创建的一个 Bridge，其作用是为连接其上的虚机网卡提供 NAT 访问外网的功能。2.virbr0 默认分配了一个IP 192.168.122.1，并为连接其上的其他虚拟网卡提供 DHCP 服务。3.使用 NAT 的虚机 VM1 可以访问外网，但外网无法直接访问 VM1。 VLANeth0 是宿主机上的物理网卡，有一个命名为 eth0.10 的子设备与之相连。eth0.10 就是 VLAN 设备了，其 VLAN ID 就是 VLAN 10。eth0.10 挂在命名为 brvlan10 的 Linux Bridge 上，虚机 VM1 的虚拟网卡 vent0 也挂在 brvlan10 上。 这样的配置其效果就是： 宿主机用软件实现了一个交换机（当然是虚拟的），上面定义了一个 VLAN10。eth0.10，brvlan10 和 vnet0 都分别接到 VLAN10 的 Access口上。而 eth0 就是一个 Trunk 口。VM1 通过 vnet0 发出来的数据包会被打上 VLAN10 的标签。 eth0.10 的作用是：定义了 VLAN10brvlan10 的作用是：Bridge 上的其他网络设备自动加入到 VLAN10 中 配置上图的实验环境后，测试KVM1和KVM2的连通性结果如下： Linux Bridge + VLAN = 虚拟交换机现在对 KVM 的网络虚拟化做个总结。 1.物理交换机存在多个 VLAN，每个 VLAN 拥有多个端口。同一 VLAN 端口之间可以交换转发，不同 VLAN 端口之间隔离。所以交换机其包含两层功能：交换与隔离。2.Linux 的 VLAN 设备实现的是隔离功能，但没有交换功能。一个 VLAN 母设备（比如 eth0）不能拥有两个相同 ID 的 VLAN 子设备，因此也就不可能出现数据交换情况。3.Linux Bridge 专门实现交换功能。将同一 VLAN 的子设备都挂载到一个 Bridge 上，设备之间就可以交换数据了。 总结起来，Linux Bridge 加 VLAN 在功能层面完整模拟现实世界里的二层交换机。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>网工</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于阿卡信自建聊天服务器]]></title>
    <url>%2F2018%2F06%2F03%2F%E5%9F%BA%E4%BA%8E%E9%98%BF%E5%8D%A1%E4%BF%A1%E8%87%AA%E5%BB%BA%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[一、安装JAVA和MAVEN环境这两个安装很简单，网上一大把的教程，因为我手头可用的只有一个Windows Server，所以这里只演示Win版的安装配置过程。 ①首先在ORACLE官网下载jre，然后直接运行安装就可以。②同样，在maven官网下载maven的压缩包，具体的安装配置过程可以参考CSDN博主的教程。③安装成功后，在cmd命令行分别用一下两条命令测试是否正确安装配置： java -versionmvn -v 二、安装Akaxin服务端程序在Github下载官方提供的jar包，并移动到C盘目录下，在cmd中首先切换到本目录：cd C:\ 然后直接运行jar包：java -jar openzaly-server.jar 然后看到提示就说明启动成功了。 三、安装客户端程序连接使用最后就是下载客户端程序了，在官网下载客户端程序后，输入服务器ip地址就可以正常使用了。这里需要注意的是，首个成员需要输入邀请码：000000进入，这样就会默认成为站点的管理员并提供管理权限。 四、问题我在配置完成之后遇到一个问题就是用客户端连接服务器的时候提示：请稍后重试，解决的办法是在服务器的安全组策略中放行：2021/2021端口。 附阿卡信官网：https://www.akaxin.com/Github项目：https://github.com/akaxincom/openzaly码云：https://gitee.com/akaxin/openzalyQQ群：655249600]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>聊天服务器</tag>
        <tag>阿卡信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专治疑难杂症]]></title>
    <url>%2F2018%2F05%2F30%2F%E4%B8%93%E6%B2%BB%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%2F</url>
    <content type="text"><![CDATA[显示器红斑 如图:前几天电脑出现过一小片红点，因为不太多，而且在换了一张桌面壁纸后就变好了，所以就没有在意。ps:之后百度有人说长时间显示一张照片会引起显示器出现问题，所以建议不要超长时间的用一张壁纸等。当然这次的问题应该于此无关，当时是因为看了一个电影，复联3，在观看的过程中就出现了大量的红点，但是以为是视频的问题当时并没有注意，后来最小化后发现竟然到处都是。这就比较烦了，在坚持看完电影之后，我开始查找原因。首先想到的是显卡的问题，因为红点的位置在每个背景下并不固定，所以初步排除显示器硬件的问题。我尝试用驱动精灵更新了驱动，并在几次重启之后依然没有好转。这就让我有点慌了，难道是显卡坏了？赶紧找来一个显示器插上，发现外接显示器显示正常。这就有点奇怪了，我又联系三星的工程师远程，在他看了一些配置之后，并没有发现问题，但是他的一句话提醒了我：“硬件或者程序兼容性问题”，我就想着会不会是看电影导致的？赶紧重置了一下播放器的设置，结果红点就消失了。。。这就说明回退思想是多么的重要。]]></content>
      <tags>
        <tag>电脑维护</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自建ssr服务器]]></title>
    <url>%2F2018%2F05%2F07%2F%E8%87%AA%E5%BB%BAssr%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[VPS购买昨天晚上看见了一个便宜的VPS没怎么想就买了，毕竟3.5刀一年，虽然平时对富强上网需求不是特别大，但是想借着这个便宜主机了解一下SSR的搭建使用，所以这点钱花的还是很值的我自己觉得。当然便宜也就意味着配置不会好了，96M内存，不过做SSR足够了。 SSR安装部署在这之前就有过搭建SSR的想法，所以当时找了一个比较不错的教程，写的比较详细，毕竟搭建SSR还是比较傻瓜的，没什么难度，按照提示写参数就行，教程地址：点这里。唯一的一个遗憾就是我买的这个VPS不支持教程里说的谷歌BBR加速，而且不知道是不是因为这个原因，我做出来的这个SSR延迟还是比较高的。如图：当然，网速还是不太稳定的，下午测试的时候是1M左右，晚上就到6.9M了，不过这也都无所谓了。 SSR客户端最后附上Win和Android端的客户端 Windows：下载地址Android：下载地址]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>SSR</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python入门]]></title>
    <url>%2F2018%2F04%2F10%2FPython%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Linux入门]]></title>
    <url>%2F2018%2F04%2F10%2FLinux%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[VIM保存退出 按ESC键 跳到命令模式，然后： :w 保存文件但不退出vi:w file 将修改另外保存到file中，不退出vi:w! 强制保存，不推出vi:wq 保存文件并退出vi:wq! 强制保存文件，并退出vi_q:_ 不保存文件，退出vi:q! 不保存文件，强制退出vi:e! 放弃所有修改，从上次保存文件开始再编辑]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的str.format]]></title>
    <url>%2F2018%2F03%2F25%2FPython%E4%B8%AD%E7%9A%84str-format%2F</url>
    <content type="text"><![CDATA[str.format 的引入在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不从心了。例如，我们想打印这样一条记录： User:John has completed Action:payment at Time:13:30:00 如果使用加号实现，会是下面这种形式： print &quot;User:&quot; + user_name + &quot; has completed Action:&quot; + \ action_name + &quot; at Time:&quot; + current_time 如果以后回过头来阅读这段代码，我们很难直观看出它的输出格式，且修改起来也相对麻烦。我们可以换用 % 来实现： print &quot;User:%s has completed Action:%s at Time:%s&quot; %\ (user_name, action_name, current_time) 这回代码变得清晰简洁多了。不过，Python 为我们提供了另一种简洁优雅的实现方式，也是官方更加推荐的方式：&nbsp;&nbsp;&nbsp;&nbsp;使用 str.format() 来实现字符串的格式化： print &quot;User:{} has completed Action:{} at Time:{}&quot;.format( user_name, action_name, current_time) str.format 既能够用于简单的场景，也能够胜任复杂的字符串替换，而无需繁琐的字符串连接操作。Python 的内置类型 str 和 unicode 均支持使用 str.format() 来格式化字符串。我们接下来就详细地讨论 str.format() 的具体用法。 str.format 基本语法格式化字符串使用花括号 {} 来包围替换字段，也就是待替换的字符串。而未被花括号包围的字符会原封不动地出现在结果中。 使用位置索引以下两种写法是等价的：“Hello, {} and {}!”.format(“John”, “Mary”)“Hello, {0} and {1}!”.format(“John”, “Mary”)花括号内部可以写上目标字符串的索引，也可以省略。如果省略，则按 format 括号里的目标字符串顺序依次替换。 使用关键字索引除了通过位置来指定目标字符串，我们还可以通过关键字来指定它。例如： “Hello, {boy} and {girl}!”.format(boy=”John”, girl=”Mary”) 使用关键字索引的好处是，我们无需关心参数的位置，且字符串的最终结果能够一目了然。在以后的代码维护中，我们能够快速地修改对应的参数，而不用对照字符串挨个去寻找相应的参数。注意：如果字符串本身含有花括号，则需要将其重复两次来转义。例如，字符串本身含有 &#123; ，为了让 Python 知道这是一个普通字符，而不是用于包围替换字段的花括号，我们只需将它改写成 &#123;&#123; 即可。 str.format 高级语法str.format 非常强大，足以完成日常工作中遇到的格式化输出。熟练掌握该方法，能够为以后的字符串处理打好基础，还能节省不少时间。 访问参数的属性或元素在使用 str.format 来格式化字符串时，我们通常将目标字符串作为参数传递给 format 方法。实际上，我们还可以在格式化字符串中访问参数的某个属性或某个元素： &quot;My car is {0.color}.&quot;.format(black_car) &quot;The first student is {student[0]}.&quot;.format(student=stu_list) &quot;John is {d[john]} years old.&quot;.format(d=age_dict) 参数输出转换参数的字符串输出，默认是由其自身的 format 方法来实现的。也就是说Python 使用参数的 format 输出来取代替换字段。如果我们想调用 str() 或 repr() 来转换参数，可以通过添加转换标志来实现： call str() on argument &quot;It&apos;s a {0!s}.&quot; call repr() on argument &quot;We can get info from {name!r}.&quot; str.format 一般形式格式化字符串的一般形式如下： &quot;... {field_name!conversion:format_spec} ...&quot; 从上面的代码可以看到，格式化字符串可分为 field_name、conversion、format_spec 三部分，分别对应替换字段名称（索引）、转换标志、格式描述。其中，字段名称是必选的，而后两者是可选的。转换标志紧跟在英文感叹号后面，而格式描述紧跟在英文冒号后面。前面已经提到过，字段名称既可是位置索引，也可是关键字索引。字段名称后面可以通过点来访问属性，或通过方括号来访问元素。在这里，我们重点看一下格式描述（format_spec）这一项。格式描述中含有6个选项，分别是 fill、align、sign、width、precision、type。 它们的位置关系如下： [[fill]align][sign][#][0][width][,][.precision][type] fill 可以是任意字符，默认为空格。align 仅当指定最小宽度时有效。&lt; 左对齐（默认选项）“&gt;” 右对齐= 仅对数字有效；将填充字符放到符号与数字间，例如 +0001234^ 居中对齐sign仅对数字有效 所有数字均带有符号 仅负数带有符号（默认选项）&nbsp;即空格；正数前面带空格，负数前面带符号‘#’ 只对整数有效自动在二进制、八进制、十六进制数值前添加对应的 0b、0o、 0x。‘,’自动在每三个数字之间添加 , 分隔符。width十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。如果没有指定对齐方式（align），那么可以在 width 前面添加一个0来实现自动填充0，等价于 fill 设为 0 并且 align 设为 =。precision用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。type确定参数类型，默认为 s ，即字符串。整数输出类型： b：以二进制格式输出c：将整数转换成对应的 unicode 字符d：以十进制输出（默认选项）o：以八进制输出x：以十六进制小写输出X：以十六进制大写输出n：与 d 相同，但使用当前环境的分隔符来分隔每3位数字十进制浮点数输出类型：e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为6E：与 e 相同，但使用大写 E 来表示指数部分f：以定点形式输出数值，默认 precision 为6F：与 f 相同g：通用格式；对于给定的 precision p &gt;= 1，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分n：与 g 相同，但使用当前环境的分隔符来分隔每3位数字%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo建站记录]]></title>
    <url>%2F2018%2F03%2F03%2Fhexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[建站过程在遇到各种各样问题之后，终于搭建完成了这个博客。 其实回过头看看也并不是很麻烦，只是遇到了许多问题，有些是因为设备环境的问题，比如在测试“ssh -T git@github.com“这条命令时，一直提示”bad address“错误，让人很费解，重装环境重新来过还是报错，只好最后换了一台电脑就没有出现这个错误。当然经验证这个并不会影响整个博客的搭建，只要密钥复制的正确这些都不碍事。 还有一个问题是因为教程的问题，在修改主配置文件的“deploy”部署时，教程写的是https地址，我也是多次尝试也没成功，最后百度到原因写ssh地址就可以解决。当然也不能一概而论，若没有错误还是推荐使用https地址。 一个个的小地方就让我走了不少的弯路。最后终于找到一个比较详细准确的教程，在此分享给大家，在这也感谢作者Line, 无意侵犯作者原作，只是想让像我这样的小白少走些弯路。作者博客中有五篇关于hexo使用的教程，个人觉得比较适合小白看。 这就是这次建站的一些小心得，水平有限有什么说的不对的地方也感谢各位不吝赐教。 #后期添加： 一、添加网易云音乐插件 在别人的博客看到了这样一个音乐插件，实现很简单，打开网易云音乐网页版，选择自己想要分享的歌单，然后点击生成外链播放器即可，插件分为两种形式：iframe插件和flash插件，可根据情况选择。 二、添加particles.js背景动画 particles.js是一个粒子效果的js插件，在Github里可以找到这个项目的源码，但是百度了一下配置方法大多是在html中实现，反正我是小白，不知道怎么修改。回归正题，怎么在Hexo中实现particles.js效果呢？1.首先在\themes\next\layout\_layout.swig的&lt; /body &gt;标签上面添加 {% if theme.canvas_nest %} {% endif %} 2.在\themes\next\_config.yml中添加以下字段开启此功能： # background settings # add canvas-nest effect # see detail from https://github.com/hustcc/canvas-nest.js canvas_nest: true 3.这样动态效果就添加成功了，你会发现博客默认的白色背景遮挡了大部分区域使得只有边缘能看见动态效果，这时候只要修改一下背景颜色即可。在\themes\next\source\css\_schemes\Pisces_layout.styl中，把.content-wrap中的background修改为none，注意我这里使用的是Pisces主题，如果你使用的是别的主题，在相应路径下修改即可。这样如果用手机打开体验会比较差，我们单独设置一下手机，把.content-wrap的+mobile()中的background修改为white，这样手机端的体验就好很多，却又不影响电脑端的炫酷动画。 三、设置文章摘要 写出来的文章如果直接在首页全篇显示就比较别扭了，为了提高浏览体验，这时候就需要设置一下文章摘要了，我这里主要介绍三种方式。 1.在文章中使用&lt; !–more–&gt; 这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。 2.在文章中的front-matter中添加description，并提供文章摘录。如图： 3.在主题配置文件中设置自动摘要 auto_excerpt: enable: true length: 150 #默认摘要为150字，可根据需要更改 官方文档： 文档|HexoNexT 错误汇总在使用hexo博客的过程中，遇到了如下一些错误： &#123; &#125;引起的报错今天写了一篇博客后按流程进行部署的时候，发现在生成静态页面的时候出现了如下的错误： 查了一下说什么的都有，每个方法也都试了一遍，最后发现是因为文章中直接引用了”&#123; &#125;”的原因，解决办法是将”&#123; &#125;”通过&amp;#123 &amp;#125后面加上分号”;”进行转换，就可以正常部署了。这里也有一些常见的特殊字符,可以根据需要转换。 标题无法正常解析在浏览别人的博客的时候发现Hexo有自动解析目录的功能，是依靠markdown的标题实现的，在加了一个“#标题”这样时却发现博客无法解析到这是一个标题，查了一下原因是正规的标题写法是在”#”和标题之间加一个空格。 换行一开始刚刚接触markdown的时候一直用html的&#60;br/&#62;换行，这种换行方式貌似在换行的同时增加了行间距，无意间发现一个更好也更简单的换行方式，就是在要换行的位置敲两个空格，就可以换行。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
