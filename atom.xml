<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyne&#39;s Blog</title>
  
  <subtitle>越努力，越幸运！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cyne.tk/"/>
  <updated>2018-03-25T09:09:19.729Z</updated>
  <id>https://cyne.tk/</id>
  
  <author>
    <name>Cyne Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的str.format</title>
    <link href="https://cyne.tk/2018/03/25/Python%E4%B8%AD%E7%9A%84str-format/"/>
    <id>https://cyne.tk/2018/03/25/Python中的str-format/</id>
    <published>2018-03-25T07:31:39.000Z</published>
    <updated>2018-03-25T09:09:19.729Z</updated>
    
    <content type="html"><![CDATA[<p>###1. str.format 的引入<br>在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不从心了。<br><br>例如，我们想打印这样一条记录：<br></p><blockquote></blockquote><pre><code>User:John has completed Action:payment at Time:13:30:00  </code></pre><p>如果使用加号实现，会是下面这种形式：<br></p><blockquote></blockquote><pre><code>print &quot;User:&quot; + user_name + &quot; has completed Action:&quot; + \ action_name + &quot; at Time:&quot; + current_time</code></pre><p>如果以后回过头来阅读这段代码，我们很难直观看出它的输出格式，且修改起来也相对麻烦。<br>我们可以换用 % 来实现：<br></p><blockquote></blockquote><pre><code>print &quot;User:%s has completed Action:%s at Time:%s&quot; %\ (user_name, action_name, current_time)</code></pre><p>这回代码变得清晰简洁多了。<br>不过，Python 为我们提供了另一种简洁优雅的实现方式，也是官方更加推荐的方式：<br><br>&nbsp;&nbsp;&nbsp;&nbsp;使用 str.format() 来实现字符串的格式化：</p><blockquote></blockquote><pre><code>print &quot;User:{} has completed Action:{} at Time:{}&quot;.format( user_name, action_name, current_time)</code></pre><p>str.format 既能够用于简单的场景，也能够胜任复杂的字符串替换，而无需繁琐的字符串连接操作。Python 的内置类型 str 和 unicode 均支持使用 str.format() 来格式化字符串。<br>我们接下来就详细地讨论 str.format() 的具体用法。</p><p>###2. str.format 基本语法<br>格式化字符串使用花括号 {} 来包围替换字段，也就是待替换的字符串。而未被花括号包围的字符会原封不动地出现在结果中。</p><p>#####2.1. 使用位置索引<br>以下两种写法是等价的：<br>“Hello, {} and {}!”.format(“John”, “Mary”)<br>“Hello, {0} and {1}!”.format(“John”, “Mary”)<br>花括号内部可以写上目标字符串的索引，也可以省略。如果省略，则按 format 括号里的目标字符串顺序依次替换。</p><p>#####2.2. 使用关键字索引<br>除了通过位置来指定目标字符串，我们还可以通过关键字来指定它。<br><br>例如：</p><blockquote></blockquote><p>“Hello, {boy} and {girl}!”.format(boy=”John”, girl=”Mary”)</p><p>使用关键字索引的好处是，我们无需关心参数的位置，且字符串的最终结果能够一目了然。在以后的代码维护中，我们能够快速地修改对应的参数，而不用对照字符串挨个去寻找相应的参数。<br>注意：如果字符串本身含有花括号，则需要将其重复两次来转义。例如，字符串本身含有 &#123; ，为了让 Python 知道这是一个普通字符，而不是用于包围替换字段的花括号，我们只需将它改写成 &#123;&#123; 即可。</p><p>###3. str.format 高级语法<br>str.format 非常强大，足以完成日常工作中遇到的格式化输出。熟练掌握该方法，能够为以后的字符串处理打好基础，还能节省不少时间。</p><p>#####3.1. 访问参数的属性或元素<br>在使用 str.format 来格式化字符串时，我们通常将目标字符串作为参数传递给 format 方法。实际上，我们还可以在格式化字符串中访问参数的某个属性或某个元素：</p><blockquote></blockquote><pre><code>&quot;My car is {0.color}.&quot;.format(black_car)&quot;The first student is {student[0]}.&quot;.format(student=stu_list)&quot;John is {d[john]} years old.&quot;.format(d=age_dict)</code></pre><p>#####3.2. 参数输出转换<br>参数的字符串输出，默认是由其自身的 <strong>format</strong> 方法来实现的。也就是说<strong>Python</strong> 使用参数的 <strong>format</strong> 输出来取代替换字段。如果我们想调用 str() 或 repr() 来转换参数，可以通过添加转换标志来实现：</p><blockquote></blockquote><pre><code> call str() on argument&quot;It&apos;s a {0!s}.&quot;</code></pre><blockquote></blockquote><pre><code>call repr() on argument&quot;We can get info from {name!r}.&quot;</code></pre><p>###4. str.format 一般形式<br>格式化字符串的一般形式如下：</p><blockquote></blockquote><pre><code>&quot;... {field_name!conversion:format_spec} ...&quot;</code></pre><p>从上面的代码可以看到，格式化字符串可分为 field_name、conversion、format_spec 三部分，分别对应替换字段名称（索引）、转换标志、格式描述。其中，字段名称是必选的，而后两者是可选的。转换标志紧跟在英文感叹号后面，而格式描述紧跟在英文冒号后面。<br><br>前面已经提到过，字段名称既可是位置索引，也可是关键字索引。字段名称后面可以通过点来访问属性，或通过方括号来访问元素。<br><br>在这里，我们重点看一下格式描述（format_spec）这一项。<br>格式描述中含有6个选项，分别是 fill、align、sign、width、precision、type。 它们的位置关系如下：</p><blockquote></blockquote><pre><code>[[fill]align][sign][#][0][width][,][.precision][type]</code></pre><blockquote><blockquote></blockquote><p>fill 可以是任意字符，默认为空格。<br><br>align 仅当指定最小宽度时有效。<br><br>&lt; 左对齐（默认选项）<br><br>“&gt;” 右对齐<br><br>= 仅对数字有效；将填充字符放到符号与数字间，例如 +0001234<br><br>^ 居中对齐<br><br>sign<br>仅对数字有效<br></p><ul><li>所有数字均带有符号<br></li></ul><ul><li>仅负数带有符号（默认选项）<br><br>&nbsp;即空格；正数前面带空格，负数前面带符号<br><br>‘#’ 只对整数有效<br>自动在二进制、八进制、十六进制数值前添加对应的 0b、0o、 0x。<br><br>‘,’<br>自动在每三个数字之间添加 , 分隔符。<br><br>width<br>十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。<br>如果没有指定对齐方式（align），那么可以在 width 前面添加一个0来实现自动填充0，等价于 fill 设为 0 并且 align 设为 =。<br><br>precision<br>用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。<br><br>type<br>确定参数类型，默认为 s ，即字符串。<br><br>整数输出类型：<blockquote><blockquote></blockquote><p>b：以二进制格式输出<br><br>c：将整数转换成对应的 unicode 字符<br><br>d：以十进制输出（默认选项）<br><br>o：以八进制输出<br><br>x：以十六进制小写输出<br><br>X：以十六进制大写输出<br><br>n：与 d 相同，但使用当前环境的分隔符来分隔每3位数字<br><br>十进制浮点数输出类型：<br><br>e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为6<br><br>E：与 e 相同，但使用大写 E 来表示指数部分<br><br>f：以定点形式输出数值，默认 precision 为6<br><br>F：与 f 相同<br><br>g：通用格式；对于给定的 precision p &gt;= 1，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）<br><br>G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分<br><br>n：与 g 相同，但使用当前环境的分隔符来分隔每3位数字<br><br>%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记</p></blockquote></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###1. str.format 的引入&lt;br&gt;在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不
      
    
    </summary>
    
      <category term="Python" scheme="https://cyne.tk/categories/Python/"/>
    
    
      <category term="Python" scheme="https://cyne.tk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站记录</title>
    <link href="https://cyne.tk/2018/03/03/hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://cyne.tk/2018/03/03/hexo建站记录/</id>
    <published>2018-03-03T02:22:23.000Z</published>
    <updated>2018-03-25T07:33:15.843Z</updated>
    
    <content type="html"><![CDATA[<p>在遇到各种各样问题之后，终于搭建完成了这个博客。</p><blockquote><p>其实回过头看看也并不是很麻烦，只是遇到了许多问题，有些是因为设备环境的问题，比如在测试“ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>“这条命令时，一直提示”bad address“错误，让人很费解，重装环境重新来过还是报错，只好最后换了一台电脑就没有出现这个错误。当然经验证这个并不会影响整个博客的搭建，只要密钥复制的正确这些都不碍事。</p><p>还有一个问题是因为教程的问题，在修改主配置文件的“deploy”部署时，教程写的是https地址，我也是多次尝试也没成功，最后百度到原因写ssh地址就可以解决。当然也不能一概而论，若没有错误还是推荐使用https地址。</p></blockquote><p>一个个的小地方就让我走了不少的弯路。最后终于找到一个比较详细准确的教程，在此分享给大家，在这也感谢作者<a href="http://fanzhenyu.me/categories/Hexo/" target="_blank" rel="noopener">Line</a>, 无意侵犯作者原作，只是想让像我这样的小白少走些弯路。作者博客中有五篇关于hexo使用的教程，个人觉得比较适合小白看。</p><p>这就是这次建站的一些小心得，水平有限有什么说的不对的地方也感谢各位不吝赐教。</p><p>后期添加：</p><blockquote><p>一、添加网易云音乐插件</p><blockquote><p><img src="https://i.loli.net/2018/03/10/5aa3e1773eb4d.png"><br>在别人的博客看到了这样一个音乐插件，实现很简单，打开<a href="http://music.163.com/#/outchain/0/2134628828/" target="_blank" rel="noopener">网易云音乐网页版</a>，选择自己想要分享的歌单，然后点击生成外链播放器即可，插件分为两种形式：iframe插件和flash插件，可根据情况选择。</p></blockquote></blockquote><blockquote><p>二、添加particles.js背景动画</p><blockquote><p><img src="https://i.loli.net/2018/03/11/5aa49a5ee0df1.jpg" alt="particles.js.jpg"><br>particles.js是一个粒子效果的js插件，在<a href="https://github.com/VincentGarreau/particles.js/" target="_blank" rel="noopener">Github</a>里可以找到这个项目的源码，但是百度了一下配置方法大多是在html中实现，反正我是小白，不知道怎么修改。回归正题，怎么在Hexo中实现particles.js效果呢？<br><br><strong>1.</strong>首先在<strong>\themes\next\layout\_layout.swig</strong>的<strong>&lt; /body &gt;</strong>标签上面添加</p></blockquote></blockquote><pre><code>{% if theme.canvas_nest %} <script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>{% endif %}</code></pre><blockquote><blockquote><p><strong>2.</strong>在<strong>\themes\next\_config.yml</strong>中添加以下字段开启此功能：</p></blockquote></blockquote><pre><code># background settings# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true</code></pre><blockquote><blockquote><p><strong>3.</strong>这样动态效果就添加成功了，你会发现博客默认的白色背景遮挡了大部分区域使得只有边缘能看见动态效果，这时候只要修改一下背景颜色即可。在<strong>\themes\next\source\css\_schemes\Pisces_layout.styl</strong>中，把<strong>.content-wrap</strong>中的<strong>background</strong>修改为<strong>none</strong>，注意我这里使用的是<strong>Pisces</strong>主题，如果你使用的是别的主题，在相应路径下修改即可。这样如果用手机打开体验会比较差，我们单独设置一下手机，把<strong>.content-wrap</strong>的<strong>+mobile()</strong>中的<strong>background</strong>修改为<strong>white</strong>，这样手机端的体验就好很多，却又不影响电脑端的炫酷动画。</p></blockquote></blockquote><blockquote><p>三、设置文章摘要</p><blockquote><p>写出来的文章如果直接在首页全篇显示就比较别扭了，为了提高浏览体验，这时候就需要设置一下文章摘要了，我这里主要介绍三种方式。</p></blockquote></blockquote><blockquote><blockquote><p><strong>1.</strong>在文章中使用<font color="blue"><strong>&lt; !–more–&gt;</strong></font></p></blockquote></blockquote><blockquote><blockquote><p>这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。</p></blockquote></blockquote><blockquote><blockquote><p><strong>2.</strong>在文章中的<font color="blue"><strong>front-matter</strong></font>中添加<font color="blue"><strong>description</strong></font>，并提供文章摘录。如图：<br><img src="https://i.loli.net/2018/03/11/5aa4d99ca9490.png" alt="description.png"></p></blockquote></blockquote><blockquote><blockquote><p><strong>3.</strong>在主题配置文件中设置自动摘要</p></blockquote></blockquote><blockquote><blockquote></blockquote><pre><code>auto_excerpt:enable: truelength: 150 #默认摘要为150字，可根据需要更改</code></pre></blockquote><p>官方文档：</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档|Hexo</a><br><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在遇到各种各样问题之后，终于搭建完成了这个博客。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实回过头看看也并不是很麻烦，只是遇到了许多问题，有些是因为设备环境的问题，比如在测试“ssh -T &lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Hexo" scheme="https://cyne.tk/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://cyne.tk/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="https://cyne.tk/tags/GitHub-Pages/"/>
    
      <category term="Blog" scheme="https://cyne.tk/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cyne.tk/2018/03/03/hello-world/"/>
    <id>https://cyne.tk/2018/03/03/hello-world/</id>
    <published>2018-03-03T01:44:18.605Z</published>
    <updated>2018-03-03T08:10:19.210Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://cyne.tk/tags/Hexo/"/>
    
  </entry>
  
</feed>
