<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyne&#39;s Blog</title>
  
  <subtitle>越努力，越幸运！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cyne.tk/"/>
  <updated>2018-07-11T13:09:51.361Z</updated>
  <id>https://cyne.tk/</id>
  
  <author>
    <name>Cyne Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虚拟化运维笔记——服务器</title>
    <link href="https://cyne.tk/2018/07/11/%E8%99%9A%E6%8B%9F%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://cyne.tk/2018/07/11/虚拟化运维笔记——服务器/</id>
    <published>2018-07-11T12:28:09.000Z</published>
    <updated>2018-07-11T13:09:51.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器通电自启"><a href="#服务器通电自启" class="headerlink" title="服务器通电自启"></a>服务器通电自启</h1><p>实验室有三台浪潮的服务器，默认关闭了通电自启的功能，因为不使用，也一直没去在意它，今天没事给它把通电自启动打开了，省的以后麻烦，在此记录一下，下图内容拍自浪潮服务器：<br>1、开机时按Delete键进入BIOS<br><img src="https://i.loli.net/2018/07/11/5b45ff414107c.jpg" alt="001.jpg"><br>2、选择Chipset-PCH<br><img src="https://i.loli.net/2018/07/11/5b45ff4151548.jpg" alt="002.jpg"><br>3、将Restore AC Power Loss修改为Power Off<br><img src="https://i.loli.net/2018/07/11/5b45ff414cd73.jpg" alt="003.jpg"><br>这里解释一下各个选项的意思：</p><blockquote><p><em>Restore AC Power Loss</em>:如果发生断电，恢复供电后系统如何反应<br><em>Power Off</em>:接通电源后保持关机状态<br><em>Power On</em>:接通电源后开机<br><em>Last State</em>:恢复到断电前的状态</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器通电自启&quot;&gt;&lt;a href=&quot;#服务器通电自启&quot; class=&quot;headerlink&quot; title=&quot;服务器通电自启&quot;&gt;&lt;/a&gt;服务器通电自启&lt;/h1&gt;&lt;p&gt;实验室有三台浪潮的服务器，默认关闭了通电自启的功能，因为不使用，也一直没去在意它，今天没事给它把通电
      
    
    </summary>
    
      <category term="运维，笔记" scheme="https://cyne.tk/categories/%E8%BF%90%E7%BB%B4%EF%BC%8C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="运维" scheme="https://cyne.tk/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化运维笔记——vsphere</title>
    <link href="https://cyne.tk/2018/07/11/%E8%99%9A%E6%8B%9F%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94vsphere/"/>
    <id>https://cyne.tk/2018/07/11/虚拟化运维笔记——vsphere/</id>
    <published>2018-07-11T10:58:49.000Z</published>
    <updated>2018-07-11T11:25:03.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置虚拟机随主机自动启动"><a href="#设置虚拟机随主机自动启动" class="headerlink" title="设置虚拟机随主机自动启动"></a>设置虚拟机随主机自动启动</h1><h2 id="0、选择虚拟机所在主机"><a href="#0、选择虚拟机所在主机" class="headerlink" title="0、选择虚拟机所在主机"></a>0、选择虚拟机所在主机</h2><p>单击选择虚拟机所在的主机，在后侧选项卡中选择“配置”<br><img src="https://i.loli.net/2018/07/11/5b45e78a91f56.png" alt="snipaste_20180711_190241.png"></p><h2 id="1、设置属性"><a href="#1、设置属性" class="headerlink" title="1、设置属性"></a>1、设置属性</h2><p>单击右上角的属性<br><img src="https://i.loli.net/2018/07/11/5b45e78a8af69.png" alt="snipaste_20180711_184912.png"></p><h2 id="2、设置虚拟机自动启动"><a href="#2、设置虚拟机自动启动" class="headerlink" title="2、设置虚拟机自动启动"></a>2、设置虚拟机自动启动</h2><p>勾选“允许虚拟机与系统一起自动启动和停止”，然后在“启动顺序”中将需要设置自动启动的虚拟机上移到自动启动一栏下，如果有需要，可根据情况设置启动延迟，最后点击确定即可。<br><img src="https://i.loli.net/2018/07/11/5b45e78a90520.png" alt="snipaste_20180711_185154.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置虚拟机随主机自动启动&quot;&gt;&lt;a href=&quot;#设置虚拟机随主机自动启动&quot; class=&quot;headerlink&quot; title=&quot;设置虚拟机随主机自动启动&quot;&gt;&lt;/a&gt;设置虚拟机随主机自动启动&lt;/h1&gt;&lt;h2 id=&quot;0、选择虚拟机所在主机&quot;&gt;&lt;a href=&quot;#0、
      
    
    </summary>
    
      <category term="运维，笔记" scheme="https://cyne.tk/categories/%E8%BF%90%E7%BB%B4%EF%BC%8C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="运维" scheme="https://cyne.tk/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>WinSCP——基于SSH的安全文件传输软件</title>
    <link href="https://cyne.tk/2018/07/03/WinSCP%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8ESSH%E7%9A%84%E5%AE%89%E5%85%A8%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E8%BD%AF%E4%BB%B6/"/>
    <id>https://cyne.tk/2018/07/03/WinSCP——基于SSH的安全文件传输软件/</id>
    <published>2018-07-03T02:10:14.000Z</published>
    <updated>2018-07-03T02:34:47.347Z</updated>
    
    <content type="html"><![CDATA[<p>我的一个影视网站因为之前买的虚拟主机到期了，就想着把它放到我那台ssr主机上，结果配置vstp的时候不知道什么原因，配置完用客户端登录的时候总是提示说密码验证失败。然后看到一个博主推荐，就是WinSCP了，它的好处在于他是基于SSH协议的sftp文件传输，也就是说，只要你的linux主机可以使用ssh，就可以用它进行文件传输。  </p><h1 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h1><p>sftp(Secure File Transfer Protocol)，安全文件传送协议，可以为传输文件提供一种安全的网络的加密方法。sftp与ftp有着几乎一样的语法和功能。SFTP是SSH的一部分，其实在SSH软件包中，已经包含了一个叫作SFTP的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。<br>SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多，所以在对网络安全性要求更高时，可以使用SFTP代替FTP。</p><h1 id="sftp于ftp的区别"><a href="#sftp于ftp的区别" class="headerlink" title="sftp于ftp的区别"></a>sftp于ftp的区别</h1><p>FTP是一种文件传输协议，一般是为了方便数据共享的，包括一个FTP服务器和多个FTP客户端，FTP客户端通过FTP协议在服务器上下载资源。而SFTP协议是基于SSH，并在FTP的基础上对数据进行加密，使得传输的数据相对来说更安全。但是这种安全是以牺牲效率为代价的，也就是说SFTP的传输效率比FTP要略低。<br>而且在我的使用过程中，并没有感觉sftp的效率较于ftp有太大的差异，而且使用sftp最大的一个好处就是不需要安装而且安全性更高。<br>更详细的区别可以移步这里：<a href="https://www.cnblogs.com/mfryf/archive/2013/05/29/3107286.html" target="_blank" rel="noopener">Sftp和ftp 区别、工作原理等（汇总ing）</a></p><h1 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h1><p>官网地址：<a href="https://winscp.net/eng/docs/lang:chs" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:chs</a><br>除了WinSCP，Windows环境下还可以使用Core FTP，FileZilla, WinSCP，Xftp来连接SFTP进行上传，下载文件，建立，删除目录等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的一个影视网站因为之前买的虚拟主机到期了，就想着把它放到我那台ssr主机上，结果配置vstp的时候不知道什么原因，配置完用客户端登录的时候总是提示说密码验证失败。然后看到一个博主推荐，就是WinSCP了，它的好处在于他是基于SSH协议的sftp文件传输，也就是说，只要你的
      
    
    </summary>
    
      <category term="Server" scheme="https://cyne.tk/categories/Server/"/>
    
    
      <category term="文件传输" scheme="https://cyne.tk/tags/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
      <category term="Server" scheme="https://cyne.tk/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化运维笔记 —— Linux</title>
    <link href="https://cyne.tk/2018/06/25/%E8%99%9A%E6%8B%9F%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Linux/"/>
    <id>https://cyne.tk/2018/06/25/虚拟化运维笔记——Linux/</id>
    <published>2018-06-25T13:50:33.000Z</published>
    <updated>2018-07-11T11:00:03.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><h2 id="Ubuntu设置静态ip"><a href="#Ubuntu设置静态ip" class="headerlink" title="Ubuntu设置静态ip"></a>Ubuntu设置静态ip</h2><p>通过修改“/etc/network/interfaces”进行修改，<br><img src="https://i.loli.net/2018/06/25/5b30f4ef9991f.png" alt="QQ图片20180625214835.png"><br>注：在设置多个DNS服务器的时候要加“s”,如：</p><blockquote></blockquote><pre><code>dns-nameservers 114.114.114.114 8.8.8.8</code></pre><p>修改之后需要执行：  </p><blockquote></blockquote><pre><code>sudo /etc/init.d/networking restart</code></pre><p>使用这个方式修改ip地址，修改完interfaces文档中的内容后，需要修改/etc/NetworkManager/NetworkManager.conf文档中的managed参数，使之为true，并重启。否则，会提示说“有线网络设备未托管”。<br>重启网络或系统之后就修改完成了。  </p><h2 id="安装TeamViewer"><a href="#安装TeamViewer" class="headerlink" title="安装TeamViewer"></a>安装TeamViewer</h2><p>teamviewer远程登录的方式不建议使用！<br>1、到TeamViewer官网下载对应版本的安装包。<br>2、下载完成之后切换到下载目录，执行：</p><blockquote></blockquote><pre><code>sudo dpkg -i teamviewer_13.0.9865_amd64.deb</code></pre><p>版本号要根据下载的包进行更改。<br>这时候可能会报出如下错误：</p><blockquote></blockquote><pre><code>正在选中未选择的软件包 teamviewer。 (正在读取数据库 … 系统当前共安装有 253291 个文件和目录。) 正准备解包 teamviewer_13.0.6634_amd64.deb … 正在解包 teamviewer (13.0.6634) … dpkg：警告：无法删除原有的目录 /var/log/teamviewer12 ：目录非空 dpkg: 依赖关系问题使得 teamviewer 的配置工作不能继续： teamviewer 依赖于 qtdeclarative5-dialogs-plugin (&gt;= 5.2) | qml-module-qtquick-dialogs (&gt;= 5.2)；然而： 未安装软件包 qtdeclarative5-dialogs-plugin。 未安装软件包 qml-module-qtquick-dialogs。 dpkg: 处理软件包 teamviewer (–install)时出错： 依赖关系问题 - 仍未被配置 正在处理用于 desktop-file-utils (0.22-1ubuntu5.1) 的触发器 … 正在处理用于 gnome-menus (3.13.3-6ubuntu3.1) 的触发器 … 正在处理用于 bamfdaemon (0.5.3~bzr0+16.04.20160824-0ubuntu1) 的触发器 … Rebuilding /usr/share/applications/bamf-2.index… 正在处理用于 mime-support (3.59ubuntu1) 的触发器 … 正在处理用于 hicolor-icon-theme (0.15-0ubuntu1) 的触发器 … 在处理时有错误发生： teamviewer</code></pre><p>目前我遇到的有两种解决方式：<br>一、修复依赖关系</p><blockquote><p>一种解决方法是执行如下命令修复依赖关系：   </p></blockquote><pre><code>sudo apt install f</code></pre><p>执行完后再安装看看能否成功，如果还是不成功就要采用第二种方式了。<br>二、更新源地址</p><blockquote><p>①删除安装到一半的teamviewer：</p></blockquote><pre><code>sudo apt-get remove teamviewer</code></pre><p>②在Ubuntu的<a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">源列表</a>中找到对应系统的源，复制到/etc/apt/sources.list 里面，并把原来的链接注释掉。<br>③更新系统软件：</p><blockquote></blockquote><pre><code>sudo apt-get update #更新软件列表sudo apt-get upgrade #更新软件</code></pre><p>④运行安装命令：</p><blockquote></blockquote><pre><code>sudo dpkg -i teamviewer_13.0.9865_amd64.deb</code></pre><p>3、在TeamViewer的使用中发现经常在系统重启后连接就出现“未知原因”的问题，原因还在摸索中，目前能解决的方法就是卸载重新安装：</p><blockquote></blockquote><pre><code>apt purge teamviewersudo dpkg -i teamviewer_13.0.9865_amd64.deb</code></pre><h2 id="16-04出现“The-system-is-running-in-low-graphics-mode”"><a href="#16-04出现“The-system-is-running-in-low-graphics-mode”" class="headerlink" title="16.04出现“The system is running in low-graphics mode”"></a>16.04出现“The system is running in low-graphics mode”</h2><p>在虚拟机中安装的Ubuntu16.04无法显示完全，尝试修改分辨率后会卡死，然后重启就会出现如题所示的错误。<br>解决方法为：<br>1、重启虚拟机，按ctrl + alt + F1 进入纯字符界面，输入账号和密码<br>2、执行如下命令：</p><blockquote></blockquote><pre><code>cd /etc/X11sudo cp xorg.conf.failsafe xorg.conf #刷新配置文件sudo reboot</code></pre><p>重启之后就可以正常显示了。</p><h2 id="启用root用户"><a href="#启用root用户" class="headerlink" title="启用root用户"></a>启用root用户</h2><p>执行：</p><blockquote></blockquote><pre><code>sudo passwd root</code></pre><p>设置密码后即可使用su直接切换为root用户。<br><img src="https://img-blog.csdn.net/20160722112307840" alt=""></p><h2 id="安装GNOME-Shell桌面"><a href="#安装GNOME-Shell桌面" class="headerlink" title="安装GNOME Shell桌面"></a>安装GNOME Shell桌面</h2><p>1、安装GNOME Shell</p><blockquote></blockquote><pre><code>sudo apt-get install gnome-shell</code></pre><p>安装过程中出现如下界面，选择lightdm：<br><img src="https://4bds6hergc-flywheel.netdna-ssl.com/wp-content/uploads/2014/06/Switch_between_gdm_and_lightgdm_Ubuntu.jpeg" alt=""><br>2、退出当前账户，选择GNOME桌面系统<br>3、重新登陆，安装gnome-tweak</p><blockquote></blockquote><pre><code>sudo apt-get install gnome-tweak-tool</code></pre><p>tweak是主题管理工具，具体使用方法参见：<br><a href="https://itsfoss.com/install-switch-themes-gnome-shell/" target="_blank" rel="noopener">https://itsfoss.com/install-switch-themes-gnome-shell/ </a><br>4、使用tweak更换主题<br>方法参考：<br><a href="https://itsfoss.com/gnome-shell-themes-ubuntu-1404/" target="_blank" rel="noopener">https://itsfoss.com/gnome-shell-themes-ubuntu-1404/</a>  </p><h2 id="执行sudo-apt-get-update出错"><a href="#执行sudo-apt-get-update出错" class="headerlink" title="执行sudo apt-get update出错"></a>执行sudo apt-get update出错</h2><p>在运行sudo apt-get update时出现如下信息：</p><blockquote></blockquote><pre><code>Reading package lists... DoneE: Problem executing scripts APT::Update::Post-Invoke-Success&apos;if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli;then appstreamcli refresh &gt; /dev/null;fi&apos;E: Sub-process returned an error code</code></pre><p>解决方法如下：</p><blockquote></blockquote><pre><code>sudo pkill -KILL appstreamcliwget -P /tmp https://launchpad.net/ubuntu/+archive/primary/+files/appstream_0.9.4-1ubuntu1_amd64.deb https://launchpad.net/ubuntu/+archive/primary/+files/libappstream3_0.9.4-1ubuntu1_amd64.debsudo dpkg -i /tmp/appstream_0.9.4-1ubuntu1_amd64.deb /tmp/libappstream3_0.9.4-1ubuntu1_amd64.deb</code></pre><p>或者：</p><blockquote></blockquote><pre><code>apt show appstreamsudo apt remove appstream</code></pre><h2 id="Ubuntu在虚拟机中显示不全的问题"><a href="#Ubuntu在虚拟机中显示不全的问题" class="headerlink" title="Ubuntu在虚拟机中显示不全的问题"></a>Ubuntu在虚拟机中显示不全的问题</h2><p>关于这个问题之前也是尝试了无数的方法，今天无意间明白了原因并解决了问题。<br>1、首先要明白的是不是随便一个分辨率都可以更改，首先执行以下命令查询当前的显示状态：</p><blockquote></blockquote><pre><code>xrandr</code></pre><p><img src="https://img-blog.csdn.net/20150602205903147?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRhczEwOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>其中第一个带*的就是当前的分辨率，其下的数值是我们可以更改的分辨率，每个虚拟机可能略有不同。<br>2、执行：</p><blockquote></blockquote><pre><code>xrandr -s 1440x900_59.9</code></pre><p>即可将分辨率设置为1440x900。<br>3、上述命令只能临时修改，永久修改需要执行：</p><blockquote></blockquote><pre><code>xrandr --output Virtual1 --mode 1440x900</code></pre><p>其中“Virtual1”是显示器的名称，要根据执行xrandr返回的信息进行相应的替换。<br>4、错误<br>这些也是我自己遇到的一点问题。</p><blockquote><p>①有时候执行步骤3中所说的命令并不能永久更改，重启后会失效。目前一个方法就是在系统设置→显示中应用一下更改过来的分辨率，这样在重启之后就不会出现问题了。<br>②“xrandr: Configure crtc 0 failed”  </p><blockquote><p>这是一个系统bug，在设置,关于这台计算机,检查更新。更新完重启后就没问题了。</p></blockquote></blockquote><h2 id="Ubuntu16-04安装VNC"><a href="#Ubuntu16-04安装VNC" class="headerlink" title="Ubuntu16.04安装VNC"></a>Ubuntu16.04安装VNC</h2><p>“VNC有很多选择，VNC4server，tigervncserver等等，都不推荐，难装又难用。经过多次实验和测试，最后只采用x11vnc作为VNC服务器端。” <a href="https://blog.csdn.net/longhr/article/details/51657610" target="_blank" rel="noopener">查看原文</a><br>1、安装X11VNC</p><blockquote></blockquote><pre><code>sudo apt install x11vnc -y</code></pre><p>2、配置访问密码</p><blockquote></blockquote><pre><code>sudo x11vnc -storepasswd /etc/x11vnc.pass </code></pre><p>3、创建服务</p><blockquote></blockquote><pre><code>vi  /lib/systemd/system/x11vnc.service</code></pre><blockquote><p>粘贴如下代码：</p></blockquote><pre><code>[Unit]Description=Start x11vnc at startup.After=multi-user.target[Service]Type=simpleExecStart=/usr/bin/x11vnc -auth guess -forever -loop -noxdamage -repeat -rfbauth /etc/x11vnc.pass -rfbport 5900 -shared[Install]WantedBy=multi-user.target</code></pre><p>4、配置防火墙，配置并启动服务</p><blockquote></blockquote><pre><code>sudo ufw allow 5900sudo systemctl enable x11vnc.servicesudo systemctl daemon-reload</code></pre><p>如果出现如下图所示的错误，就说明第三步中你的配置信息粘贴错误了，修改正确即可解决。<img src="https://i.loli.net/2018/06/30/5b37243cc1a2e.jpg" alt="QQ图片20180630142539.jpg"><br>5、重启系统</p><blockquote></blockquote><pre><code>reboot</code></pre><h2 id="nat123配置"><a href="#nat123配置" class="headerlink" title="nat123配置"></a>nat123配置</h2><p>nat123端口映射是专业的内网端口映射软件，在内网启动映射后，可在外网轻松访问连接内网网站等应用，不需要设置路由器，不需要公网ip,不需要固定ip,不需要动态域名。  </p><p>Ubuntu配置过程：（其它linux直接参考<a href="http://www.nat123.com/pages_17_600.jsp" target="_blank" rel="noopener">官网说明</a>）<br>0、注册账号<br>没有注册过账号的先到官网注册：<a href="http://www.nat123.com/" target="_blank" rel="noopener">http://www.nat123.com/</a><br>1、安装mono运行环境</p><blockquote></blockquote><pre><code>apt-get  install  mono-complete</code></pre><p>安装完成后执行“mono -V”可查看安装的版本信息。<br>2、客户端安装</p><blockquote></blockquote><pre><code>cd  /optmkdir  nat123cd  /nat123wget  http://www.nat123.com/down/nat123linux.tar.gztar  -zxvf  nat123linux.tar.gz</code></pre><p>3、启动客户端</p><blockquote></blockquote><pre><code>cd  /opt/nat123mono  nat123linux.sh</code></pre><p>输入用户名和密码登录成功后，直接结束当前进程，然后执行如下命令改为后台运行：</p><blockquote></blockquote><pre><code>cd  /opt/nat123mono  nat123linux.sh service &amp;ps  -ef|grep  nat123 #查看nat123状态</code></pre><p>4、登录网页添加端口映射或动态域名解析</p><h1 id="RHEL"><a href="#RHEL" class="headerlink" title="RHEL"></a>RHEL</h1><h2 id="系统意外重启后VNC连接失败"><a href="#系统意外重启后VNC连接失败" class="headerlink" title="系统意外重启后VNC连接失败"></a>系统意外重启后VNC连接失败</h2><p>在服务器中运行着几个RHEL实例，VNC是之前老师配置的，这几个实例在服务器断电重启之后会出现VNC连接出错的问题。解决方法如下：</p><blockquote></blockquote><pre><code>cd /tmprm -rvf .X11-unix #手动删除因为VNC非正常退出未删除的文件vncserver :3 #重启服务</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h1&gt;&lt;h2 id=&quot;Ubuntu设置静态ip&quot;&gt;&lt;a href=&quot;#Ubuntu设置静态ip&quot; class=&quot;head
      
    
    </summary>
    
      <category term="运维，笔记" scheme="https://cyne.tk/categories/%E8%BF%90%E7%BB%B4%EF%BC%8C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="运维" scheme="https://cyne.tk/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>SDN入门（一）—— 环境搭建</title>
    <link href="https://cyne.tk/2018/06/24/SDN%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://cyne.tk/2018/06/24/SDN入门（一）——-环境搭建/</id>
    <published>2018-06-24T01:20:49.000Z</published>
    <updated>2018-06-30T06:25:22.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h1><h2 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h2><p>镜像建议使用16.04的版本，mininet官网有说明，是因为16.04支持新版本的openflow等协议，我这里使用的是“ubuntu-16.04-server-amd64.iso”，server版本更加稳定。</p><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><h3 id="设置网卡"><a href="#设置网卡" class="headerlink" title="设置网卡"></a>设置网卡</h3><p>因为要使用ssh远程登录，这里我们添加一个网卡：<br><img src="https://i.loli.net/2018/06/24/5b2ef5cbec5f1.png" alt="01.png"><br>勾选“启用网络连接”，并选择仅主机模式。</p><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>挂载镜像之后启动虚拟机进行安装，基本的安装过程不一一详细介绍，不会的地方可以百度。<br><img src="https://i.loli.net/2018/06/24/5b2ef77a37059.png" alt="02.png"><br>可以看到安装程序已经识别出了两块网卡，我们选择默认的nat网卡作为主网络接口。<br><img src="https://i.loli.net/2018/06/24/5b2ef9a7a101d.png" alt="03.png"><br>软件安装，我们只需要安装ssh server就可以了，记得空格选择，回车确认。  </p><p>安装完成后，我们看一下系统的网卡信息，发现并没有我们添加的网卡。<br><img src="https://i.loli.net/2018/06/24/5b2efcabda76f.png" alt="04.png"><br>执行“sudo dhclient enp0s8”启用enp0s8网卡。<br>再次查看网卡信息：<br><img src="https://i.loli.net/2018/06/24/5b2efed26c4cc.png" alt="05.png"><br>可以看到已经添加进来了。我们还需要将第二块网卡的配置加入到网络配置文件中，不然重启之后第二块网卡还是看不到的：  </p><blockquote></blockquote><pre><code>sudo vi /etc/network/interfaces</code></pre><p>在interfaces配置文件中加入enp0s8，同样使用dhcp方式获取ip<br><img src="https://i.loli.net/2018/06/24/5b2efffbe249f.png" alt="06.png"><br>至此，我们的系统就配置完成了，用ssh工具进行连接：<br><img src="https://i.loli.net/2018/06/24/5b2f00ad250a3.png" alt="07.png"><br>已经可以成功连接。</p><h1 id="安装Ryu"><a href="#安装Ryu" class="headerlink" title="安装Ryu"></a>安装Ryu</h1><p>详细内容可参考<a href="http://linton.tw/2014/02/15/note-install-ryu-36-sdn-framework/" target="_blank" rel="noopener">linton的博客</a>。</p><p>1.下载python的套件库，并更新pip（因为下载的pip并不是最新版本）</p><blockquote></blockquote><pre><code>sudo apt-get install python-pip python-dev build-essentialsudo pip install --upgrade pip</code></pre><p>2.安装Ryu相依性套件</p><blockquote></blockquote><pre><code>sudo apt-get install python-eventletsudo apt-get install python-routessudo apt-get install python-webobsudo apt-get install python-paramiko</code></pre><p>3.使用pip下载并安装Ryu</p><blockquote></blockquote><pre><code>sudo pip install ryu</code></pre><p>此步骤如果出现如下错误信息说明你被挡在城内了，富强上网即可解决。<br><img src="https://i.loli.net/2018/06/24/5b2f22b8832fc.png" alt="需要富强上网.png"><br>4.如果需要使用Ryu with GUI则进行此步骤：下载Ryu source code（需要使用git套件）</p><blockquote></blockquote><pre><code>sudo apt-get install gitgit clone https://github.com/osrg/ryu.git</code></pre><p>5.完成安装，执行ryu-manager验证有没有出现错误，没问题的话会出现如下信息：<br><img src="https://i.loli.net/2018/06/24/5b2f1ff8a73bd.png" alt="chenggong.png"></p><h1 id="安装mininet"><a href="#安装mininet" class="headerlink" title="安装mininet"></a>安装mininet</h1><h2 id="使用源码安装mininet"><a href="#使用源码安装mininet" class="headerlink" title="使用源码安装mininet"></a>使用源码安装mininet</h2><p>为了减少之后不必要的麻烦，建议在安装开始前执行：sudo su切换到root用户下并在富强网络下进行安装。<br>1.升级系统</p><blockquote></blockquote><pre><code>apt-get updateapt-get upgrade</code></pre><p>2.安装git（如果你像我一样在之前安装Ryu时我们已经安装过git了，那么请直接跳过此步骤）</p><blockquote></blockquote><pre><code>apt install git</code></pre><p>3.从github上获取源码</p><blockquote></blockquote><pre><code>git clone git://github.com/mininet/mininet</code></pre><p>获取之后可以使用如下命令查看mininet的版本</p><blockquote></blockquote><pre><code>cd mininetcat INSTALL</code></pre><p><img src="https://i.loli.net/2018/06/24/5b2f4c772e56f.png" alt="cat.png"><br>4.确认无误后，安装mininet</p><blockquote></blockquote><pre><code>util/install.sh -a</code></pre><p>当你看到Enjoy Mininet！时，恭喜你已经安装成功了。<br><img src="https://i.loli.net/2018/06/24/5b2f4cb8a6bfc.png" alt="enjoy.png"><br>执行以下命令查看安装版本：</p><blockquote></blockquote><pre><code>mn --version</code></pre><h2 id="mininet可视化操作"><a href="#mininet可视化操作" class="headerlink" title="mininet可视化操作"></a>mininet可视化操作</h2><p>1.要进行mininet可视化操作，需要安装Xmanager套件，然后在通过Xshell远程连接主机时，在属性中做如下设置：<br><img src="https://i.loli.net/2018/06/24/5b2f4a82c2097.png" alt="suidao.png"><br>2.然后进入examples目录，执行miniedit.py即可启动可视化界面</p><blockquote></blockquote><pre><code>cd mininet/mininet/examples./miniedit.py</code></pre><p><img src="https://i.loli.net/2018/06/24/5b2f4cf66b46e.png" alt="可视化.png"><br>至此，整个环境就搭建完成了。<br>如果是桌面版系统并且用apt-get install mininet安装的mininet,目录在/usr / share /doc/mininet/examples,但是其可视化脚本是py.gz格式的，貌似无法使用。</p><p>如果对环境的安装有疑问，欢迎与我联系，一起沟通交流。  </p><blockquote><p>email: <a href="mailto:666@cyne.cf" target="_blank" rel="noopener">666@cyne.cf</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu安装&quot;&gt;&lt;a href=&quot;#Ubuntu安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu安装&quot;&gt;&lt;/a&gt;Ubuntu安装&lt;/h1&gt;&lt;h2 id=&quot;系统选择&quot;&gt;&lt;a href=&quot;#系统选择&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://cyne.tk/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网工" scheme="https://cyne.tk/tags/%E7%BD%91%E5%B7%A5/"/>
    
      <category term="SDN" scheme="https://cyne.tk/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack入门（三）—— OpenStack架构</title>
    <link href="https://cyne.tk/2018/06/19/OpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94-OpenStack%E6%9E%B6%E6%9E%84/"/>
    <id>https://cyne.tk/2018/06/19/OpenStack入门（三）——-OpenStack架构/</id>
    <published>2018-06-19T11:51:37.000Z</published>
    <updated>2018-06-21T12:43:45.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160331-1459396287488044421.jpg" alt=""></p><h1 id="OpenStack架构"><a href="#OpenStack架构" class="headerlink" title="OpenStack架构"></a>OpenStack架构</h1><p>OpenStack的Conceptual Architecture(概念体系结构)：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160331-1459396288164018195.jpg" alt=""></p><blockquote><p>中间菱形是虚拟机，围绕 VM 的那些长方形代表 OpenStack 不同的模块（OpenStack 叫服务，后面都用服务这个术语），下面来分别介绍。</p></blockquote><blockquote><p>Nova：管理 VM 的生命周期，是 OpenStack 中最核心的服务。</p></blockquote><blockquote><p>Neutron：为 OpenStack 提供网络连接服务，负责创建和管理L2、L3 网络，为 VM 提供虚拟网络和物理网络连接。</p></blockquote><blockquote><p>Glance：管理 VM 的启动镜像，Nova 创建 VM 时将使用 Glance 提供的镜像。</p></blockquote><blockquote><p>Cinder：为 VM 提供块存储服务。Cinder 提供的每一个 Volume 在 VM 看来就是一块虚拟硬盘，一般用作数据盘。</p></blockquote><blockquote><p>Swift：提供对象存储服务。VM 可以通过 RESTful API 存放对象数据。作为可选的方案，Glance 可以将镜像存放在 Swift 中；Cinder 也可以将 Volume 备份到 Swift 中。</p></blockquote><blockquote><p>Keystone：为 OpenStack 的各种服务提供认证和权限管理服务。简单的说，OpenStack 上的每一个操作都必须通过 Keystone 的审核。</p></blockquote><blockquote><p>Ceilometer：提供 OpenStac k监控和计量服务，为报警、统计或计费提供数据。</p></blockquote><blockquote><p>Horizon：为 OpenStack 用户提供一个 Web 的自服务 Portal。  </p></blockquote><p>OpenStack的Logical Architecture（逻辑体系结构）：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160331-1459396289980075632.jpg" alt=""></p><h1 id="搭建实验环境"><a href="#搭建实验环境" class="headerlink" title="搭建实验环境"></a>搭建实验环境</h1><p>我们分两个节点进行环境部署：<br>1.devstack-controller：控制节点 + 网络节点 + 块存储节点 + 计算节点<br>2.devstack-compute：计算节点<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160403-1459686062619002987.jpg" alt=""><br>配置要求：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160403-1459686062793065054.jpg" alt=""><br>网络规划：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160404-1459724662268078986.png" alt="network"><br>我们规划了三个网络： </p><p>1.<em>Management Network：</em></p><blockquote><p>用于 OpenStack 内部管理用，比如各服务之间通信。<br>这里使用 eth0        </p></blockquote><p>2.<em>VM（Tenant）Network：</em></p><blockquote><p>OpenStack 部署的虚拟机所使用的网络。<br>OpenStack 支持多租户（Tenant），虚机是放在 Tenant 下的，所以叫 Tenant Network。<br>这里使用 eth1        </p></blockquote><p>3.<em>External Network：</em></p><blockquote><p>一般来说，Tenant Network 是内部私有网络，只用于 VM 之间通信，与其他非 VM 网络是隔离的。<br>这里我们规划了一个外部网络（External Network），通过 devstak-controller 的 eth2 连接。<br>Neutron 通过 L3 服务让 VM 能够访问到 External Network。<br>对于公有云，External Network 一般指的是 Internet。<br>对于企业私有云，External Network 则可以是 Intranet 中的某个网络。 </p></blockquote><h1 id="部署DevStack"><a href="#部署DevStack" class="headerlink" title="部署DevStack"></a>部署DevStack</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160331-1459396287488044421.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;OpenStack架构&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://cyne.tk/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack" scheme="https://cyne.tk/tags/OpenStack/"/>
    
      <category term="网工" scheme="https://cyne.tk/tags/%E7%BD%91%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack入门（二）—— 云计算</title>
    <link href="https://cyne.tk/2018/06/19/OpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94-%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    <id>https://cyne.tk/2018/06/19/OpenStack入门（二）——-云计算/</id>
    <published>2018-06-19T11:31:46.000Z</published>
    <updated>2018-06-19T11:47:01.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>这张图很形象的描述了云计算的基本概念：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160329-1459256505303011231.png" alt="云计算"><br>云平台是一个面向服务的架构，按照提供服务的不同分为 IaaS、PaaS 和 SaaS。<br><img src="http://img.blog.csdn.net/20160329205344575" alt="分类"><br><em>IaaS</em>（Infrastructure as a Service）提供的服务是虚拟机。</p><blockquote><p>IaaS 负责管理虚机的生命周期，包括创建、修改、备份、启停、销毁等。<br>使用者从云平台得到的是一个已经安装好镜像（操作系统+其他预装软件）的虚拟机。<br>使用者需要关心虚机的类型（OS）和配置（CPU、内存、磁盘），并且自己负责部署上层的中间件和应用。<br>IaaS 的使用者通常是数据中心的系统管理员。<br>典型的 IaaS 例子有 AWS、Rackspace、阿里云等。  </p></blockquote><p><em>PaaS</em>（Platform as a Service）提供的服务是应用的运行环境和一系列中间件服务（比如数据库、消息队列等）。</p><blockquote><p>使用者只需专注应用的开发，并将自己的应用和数据部署到PaaS环境中。<br>PaaS负责保证这些服务的可用性和性能。<br>PaaS的使用者通常是应用的开发人员。<br>典型的 PaaS 有 Google App Engine、IBM BlueMix 等  </p></blockquote><p><em>SaaS</em>（Software as a Service）提供的是应用服务。</p><blockquote><p>使用者只需要登录并使用应用，无需关心应用使用什么技术实现，也不需要关系应用部署在哪里。<br>SaaS的使用者通常是应用的最终用户。<br>典型的 SaaS 有 Google Gmail、Salesforce 等</p></blockquote><h1 id="云计算和OpenStack"><a href="#云计算和OpenStack" class="headerlink" title="云计算和OpenStack"></a>云计算和OpenStack</h1><p>OpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface.  </p><p>以上是官网对 OpenStack 的定义，OpenStack 对数据中心的计算、存储和网络资源进行统一管理。<br>由此可见，OpenStack 针对的是 IT 基础设施，是 IaaS 这个层次的云操作系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;这张图很形象的描述了云计算的基本概念：&lt;br&gt;&lt;img src=&quot;http://7xo6kd.com1.z0.glb.clo
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://cyne.tk/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack" scheme="https://cyne.tk/tags/OpenStack/"/>
    
      <category term="网工" scheme="https://cyne.tk/tags/%E7%BD%91%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack入门（一）—— 虚拟化</title>
    <link href="https://cyne.tk/2018/06/06/OpenStack%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94-%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <id>https://cyne.tk/2018/06/06/OpenStack入门（一）——-虚拟化/</id>
    <published>2018-06-06T11:45:18.000Z</published>
    <updated>2018-06-27T13:04:17.650Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个网络工程专业的大二学生，现在已经临近期末，也就是说马上就要大三了。最近身边的一些事，让我慢慢发现，如果以后只做一个普通的网工，只会敲敲命令行之类的，几乎没有什么前景，而且随着SDN、自动化运维的发展，普通网工的价值也显得越来越低，所以还是觉得应该学点别的东西来武装自己，比如——虚拟化。  </p><p>今天在知乎上看了一些大佬的解答，感觉很受启发，网工可能真的是一个轻松的工作，但一个人的工资总是与创造的价值成正比的。虽然知道OpenStack体系结构复杂，知识涉及面庞大，但还是决定接触一下。所以从今天开始就要入门OpenStack了，也但愿我可以一路坚持下去。</p><h1 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h1><p><img src="https://i.loli.net/2018/06/06/5b17cf7d178cc.jpg" alt="1.jpg"> OpenStack是云操作系统，要学习OpenStack，首先需要掌握一些虚拟化和云计算的相关知识。  </p><blockquote><p>物理机为宿主机Host，虚拟机为客户机Guest<br>宿主机通过Hypervisor程序实现硬件的虚拟化<br>根据实现方式分为1型虚拟化和2型虚拟化  </p></blockquote><h2 id="1型虚拟化"><a href="#1型虚拟化" class="headerlink" title="1型虚拟化"></a>1型虚拟化</h2><p><img src="https://i.loli.net/2018/06/06/5b17e2cc5c425.jpg" alt="1.1.jpg"><br>Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。</p><h2 id="2型虚拟化"><a href="#2型虚拟化" class="headerlink" title="2型虚拟化"></a>2型虚拟化</h2><p><img src="https://i.loli.net/2018/06/06/5b17e2cc5d990.jpg" alt="1.2.jpg"><br>物理机上首先安装常规的操作系统，Hypervisor 作为 OS 上的一个程序模块运行，并对管理虚拟机进行管理。</p><h1 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="https://i.loli.net/2018/06/07/5b1919d6162be.png" alt="2.1.png"><br>因为在 x86 平台上最热门运用最广泛的虚拟化方案莫过于 KVM同时OpenStack对KVM支持的最好，所以实验环境选择KVM。  </p><blockquote><p>KVM是2型虚拟化<br>KVM有一个内核模块交kvm.ko，只用于广利虚拟cpu和内存<br>IO如存储和网络的虚拟化由Linux内核和Qemu实现<br>Libvirt简单的说就是KVM的管理工具  </p></blockquote><h2 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h2><p>因为手头没有可以用的Linux系统的主机，所以这里我选择在VMWare虚拟机安装KVM。为了能让 KVM 能创建 嵌套的虚机，要把 CPU 的虚拟化功能打开：<br><img src="https://i.loli.net/2018/06/07/5b1921f5d79c7.jpg" alt="2.2.jpg"><br>Ubuntu启动后，用一下命令确认cpu支持虚拟化：  </p><blockquote></blockquote><pre><code># egrep -o &apos;(vmx|svm)&apos; /proc/cpuinfo# vmx  </code></pre><p>确认 Libvirtd 服务已经启动:</p><blockquote></blockquote><pre><code># service libvirt-bin statuslibvirt-bin start/running, process 1478  </code></pre><p>到这里KVM准备就绪。</p><h2 id="几个小问题"><a href="#几个小问题" class="headerlink" title="几个小问题"></a>几个小问题</h2><p>我在安装环境的时候遇到了以下两个小问题：  </p><blockquote><p>1.未发现软件包<br><img src="https://i.loli.net/2018/06/08/5b1a9434c5b2c.png" alt="q1.png"><br>解决方法很简单，在命令行下执行： </p></blockquote><pre><code>sudo apt-get update </code></pre><blockquote><p>更新apt的资源列表即可解决  </p><p>2.ssh无法启动<br><img src="https://i.loli.net/2018/06/08/5b1a9434ba868.png" alt="q2.png"><br>这个主要是因为我安装的Ubuntu在安装时并没有安装ssh-server，执行：</p></blockquote><pre><code>sudo apt-get install openssh-server</code></pre><blockquote><p>安装ssh服务端程序即可解决。  </p><p>3.Ubuntu缺少管理员权限无法打开文件</p><p>这个问题也是我用Ubuntu感觉不太方便的地方，百度了以下可以安装这个：</p></blockquote><pre><code>sudo apt-get install nautilus-open-terminal</code></pre><blockquote><p>重启后，打开想要打开的目录执行：</p></blockquote><pre><code>sudo nautilus</code></pre><blockquote></blockquote><h1 id="启动第一个KVM虚拟机"><a href="#启动第一个KVM虚拟机" class="headerlink" title="启动第一个KVM虚拟机"></a>启动第一个KVM虚拟机</h1><h2 id="启动虚机"><a href="#启动虚机" class="headerlink" title="启动虚机"></a>启动虚机</h2><p><img src="https://i.loli.net/2018/06/08/5b1a9434c3dc3.jpg" alt="3.jpg"><br>环境搭好，这个步骤就很简单了。要做笔记的可能就是博主推荐的用来测试效果的超轻量级的Linux系统cirros了，镜像文件只有几十兆。<br>这是我的第一个KVM——kvm1，截个图纪念一下：<br><img src="https://i.loli.net/2018/06/08/5b1a9434c8ec6.png" alt="result.png"><br>另外除了用virt-manager对虚机进行各种管理操作，也可以使用命令 virsh管理虚机，比如查看宿主机上的虚机：</p><blockquote></blockquote><pre><code>root@ubuntu:~# virsh listId    Name              State--------------------------------8     kvm1              running  </code></pre><h2 id="远程管理虚机"><a href="#远程管理虚机" class="headerlink" title="远程管理虚机"></a>远程管理虚机</h2><p><img src="https://i.loli.net/2018/06/09/5b1b27716ddac.jpg" alt="4.jpg"><br>virt-manager也可以管理其它宿主机上的虚机，只需要将其添加进来就可以进行远程管理。<br>因为 KVM（准确说是 Libvirt）默认不接受远程管理，需要按下面的内容配置被管理宿主机中的两个文件：<br><em>/etc/default/libvirt-bin</em></p><blockquote><p>start_libvirtd=”yes”<br>libvirtd_opts=”-d -l”</p></blockquote><p><em>/etc/libvirt/libvirtd.conf</em></p><blockquote><p>listen_tls = 0<br>listen_tcp = 1<br>unix_sock_group = “libvirtd”<br>unix_sock_ro_perms = “0777”<br>unix_sock_rw_perms = “0770”<br>auth_unix_ro = “none”<br>auth_unix_rw = “none”<br>auth_tcp = “none”   </p></blockquote><p>然后重启 Libvirtd 服务就可以远程管理了。  </p><blockquote><p>service libvirt-bin restart  </p></blockquote><h1 id="KVM虚拟化原理"><a href="#KVM虚拟化原理" class="headerlink" title="KVM虚拟化原理"></a>KVM虚拟化原理</h1><p><img src="https://i.loli.net/2018/06/09/5b1b2969e2d27.jpg" alt="01.jpg"></p><h2 id="cpu虚拟化"><a href="#cpu虚拟化" class="headerlink" title="cpu虚拟化"></a>cpu虚拟化</h2><p>虚机中的每一个虚拟 vCPU 则对应 qemu-kvm 进程中的一个线程。<br><img src="https://i.loli.net/2018/06/09/5b1b2a550e50b.jpg" alt="4.1.jpg"><br>在这个例子中，宿主机有两个物理 CPU，上面起了两个虚机 VM1 和 VM2。<br>VM1 有两个 vCPU，VM2 有 4 个 vCPU。可以看到 VM1 和 VM2 分别有两个和 4 个线程在两个物理 CPU 上调度。<br>这里也演示了另一个知识点，即虚机的 vCPU 总数可以超过物理 CPU 数量，这个叫 CPU overcommit（超配）。<br>KVM 允许 overcommit，这个特性使得虚机能够充分利用宿主机的 CPU 资源，但前提是在同一时刻，不是所有的虚机都满负荷运行。<br>当然，如果每个虚机都很忙，反而会影响整体性能，所以在使用 overcommit 的时候，需要对虚机的负载情况有所了解，需要测试。</p><h2 id="内存虚拟化"><a href="#内存虚拟化" class="headerlink" title="内存虚拟化"></a>内存虚拟化</h2><p>KVM 通过内存虚拟化共享物理系统内存，动态分配给虚拟机。<br><img src="https://i.loli.net/2018/06/09/5b1b4479be961.jpg" alt="m.jpg"><br>为了在一台机器上运行多个虚拟机，KVM 需要实现 VA（虚拟内存） -&gt; PA（物理内存） -&gt; MA（机器内存）直接的地址转换。虚机 OS 控制虚拟地址到客户内存物理地址的映射 （VA -&gt; PA），但是虚机 OS 不能直接访问实际机器内存，因此 KVM 需要负责映射客户物理内存到实际机器内存 （PA -&gt; MA）。内存也是可以 overcommit 的，即所有虚机的内存之和可以超过宿主机的物理内存。但使用时也需要充分测试，否则性能会受影响。</p><h2 id="存储虚拟化"><a href="#存储虚拟化" class="headerlink" title="存储虚拟化"></a>存储虚拟化</h2><p>KVM 的存储虚拟化是通过存储池（Storage Pool）和卷（Volume）来管理的。<br>Storage Pool 是宿主机上可以看到的一片存储空间，可以是多种类型，后面会详细讨论。Volume 是在 Storage Pool 中划分出的一块空间，宿主机将 Volume 分配给虚拟机，Volume 在虚拟机中看到的就是一块硬盘。</p><h3 id="目录类型的-Storage-Pool"><a href="#目录类型的-Storage-Pool" class="headerlink" title="目录类型的 Storage Pool"></a>目录类型的 Storage Pool</h3><p>文件目录是最常用的 Storage Pool 类型。<br>KVM 将宿主机目录 /var/lib/libvirt/images/ 作为默认的 Storage Pool。<br>那么 Volume 是什么呢？答案就是该目录下面的文件了，一个文件就是一个 Volume。  </p><blockquote><p>为虚机 kvm1 添加一个新的磁盘，看看有什么变化。<br>在 virt-manager 中打开 kvm1 的配置页面，右键添加新硬件<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160313-1457875038029032821.jpg" alt=""><br>在默认 Pool 中创建一个 8G 的卷。<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160313-1457875038314009772.jpg" alt=""><br>然后发现在 /var/lib/libvirt/images/ 下多了一个 8G 的文件 kvm1.img  </p></blockquote><p>使用文件做 Volume 有很多优点：存储方便、移植性好、可复制、可远程访问。前面几个优点都很好理解，这里对“可远程访问”多解释一下。远程访问的意思是镜像文件不一定都放置到宿主机本地文件系统中，也可以存储在通过网络连接的远程文件系统，比如 NFS，或者是分布式文件系统中，比如 GlusterFS。这样镜像文件就可以在多个宿主机之间共享，便于虚机在不同宿主机之间做 Live Migration；如果是分布式文件系统，多副本的特性还可以保证镜像文件的高可用。<br>KVM 支持多种 Volume 文件格式，在添加 Volume 时可以选择：</p><blockquote><p>raw 是默认格式，即原始磁盘镜像格式，移植性好，性能好，但大小固定，不能节省磁盘空间。<br>qcow2 是推荐使用的格式，cow 表示 copy on write，能够节省磁盘空间，支持 AES 加密，支持 zlib 压缩，支持多快照，功能很多。<br>vmdk 是 VMWare 的虚拟磁盘格式，也就是说 VMWare 虚机可以直接在 KVM上 运行。</p></blockquote><h3 id="LVM类型的Storage-Pool"><a href="#LVM类型的Storage-Pool" class="headerlink" title="LVM类型的Storage Pool"></a>LVM类型的Storage Pool</h3><p>宿主机上 VG 中的 LV 也可以作为虚拟磁盘分配给虚拟机使用。<br>不过，LV 由于没有磁盘的 MBR 引导记录，不能作为虚拟机的启动盘，只能作为数据盘使用。<br>补充几个概念：</p><blockquote><p>逻辑卷管理器—–LVM（Logicl Volume Manager）  </p><blockquote><p>通过使用逻辑卷管理器对硬盘存储设备进行管理，可以实现硬盘空间的动态划分和调整。</p></blockquote><p>物理卷—–PV（Physical Volume）  </p><blockquote><p>物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘。 </p></blockquote></blockquote><p>卷组——–VG（Volumne Group）  </p><blockquote><blockquote><p>卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。</p></blockquote><p>逻辑卷—–LV（Logical Volume）</p><blockquote></blockquote><p>逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组。  </p></blockquote><p>这种配置下，宿主机上的 VG 就是一个 Storage Pool，VG 中的 LV 就是 Volume。<br>LV 的优点是有较好的性能；不足的地方是管理和移动性方面不如镜像文件，而且不能通过网络远程使用。</p><h3 id="其他类型的Storage-Pool"><a href="#其他类型的Storage-Pool" class="headerlink" title="其他类型的Storage Pool"></a>其他类型的Storage Pool</h3><p>KVM 还支持 iSCSI，Ceph 等多种类型的 Storage Pool。</p><h2 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h2><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160317-1458221777139021452.jpg" alt="4.4"><br>下面这个图是OpenStack官网给出的计算节点（可以理解为 KVM 的宿主机）虚拟网络的逻辑图：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160317-1458221777406075614.jpg" alt="4.4.0"></p><h3 id="Linux-Bridge"><a href="#Linux-Bridge" class="headerlink" title="Linux Bridge"></a>Linux Bridge</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>给 VM1 分配一个虚拟网卡 vnet0，通过 Linux Bridge  br0 将 eth0 和 vnet0 连接起来，如下图所示:<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160317-1458221778960074364.png" alt=""><br>Linux Bridge 是 Linux 上用来做 TCP/IP 二层协议交换的设备，其功能大家可以简单的理解为是一个二层交换机或者 Hub。多个网络设备可以连接到同一个 Linux Bridge，当某个设备收到数据包时，Linux Bridge 会将数据转发给其他设备。<br>在上面这个例子中，当有数据到达 eth0 时，br0 会将数据转发给 vnet0，这样 VM1 就能接收到来自外网的数据；反过来，VM1 发送数据给 vnet0，br0 也会将数据转发到 eth0，从而实现了 VM1 与外网的通信。<br>现在我们增加一个虚机 VM2，如下图所示:<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160317-1458221779001036894.png" alt=""><br>VM2 的虚拟网卡 vnet1 也连接到了 br0 上。<br>现在 VM1 和 VM2 之间可以通信，同时 VM1 和 VM2 也都可以与外网通信。</p><h4 id="动手实践虚拟网络"><a href="#动手实践虚拟网络" class="headerlink" title="动手实践虚拟网络"></a>动手实践虚拟网络</h4><h5 id="配置Linux-Bridge-br0"><a href="#配置Linux-Bridge-br0" class="headerlink" title="配置Linux Bridge br0"></a>配置Linux Bridge br0</h5><p>有两点需要注意：  </p><blockquote><p>1.之前宿主机的 IP 是通过 dhcp 配置在 eth0 上的；创建 Linux Bridge 之后，IP 就必须放到 br0 上了<br>2.在 br0 的配置信息中请注意最后一行 “bridge_ports eth0”，其作用就是将 eth0 挂到 br0 上</p></blockquote><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>配置过程很简单，有一个影响不大的小问题是我的interfaces文件不太一样，不过按照博主的配置，虽然写的多了一点，但不影响效果。<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160319-1458396234852047669.jpg" alt=""><br>最后附一张成功的截图，学习的乐趣也就在于这种满足感吧，哈哈。<br><img src="https://i.loli.net/2018/06/11/5b1e7bb8b2a03.png" alt="snipaste_20180611_213328.png"></p><h4 id="理解virbr0"><a href="#理解virbr0" class="headerlink" title="理解virbr0"></a>理解virbr0</h4><blockquote><p>1.virbr0 是 KVM 默认创建的一个 Bridge，其作用是为连接其上的虚机网卡提供 NAT 访问外网的功能。<br>2.virbr0 默认分配了一个IP 192.168.122.1，并为连接其上的其他虚拟网卡提供 DHCP 服务。<br>3.使用 NAT 的虚机 VM1 可以访问外网，但外网无法直接访问 VM1。</p></blockquote><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160324-1458779560823058198.jpg" alt=""><br>eth0 是宿主机上的物理网卡，有一个命名为 eth0.10 的子设备与之相连。<br>eth0.10 就是 VLAN 设备了，其 VLAN ID 就是 VLAN 10。<br>eth0.10 挂在命名为 brvlan10 的 Linux Bridge 上，虚机 VM1 的虚拟网卡 vent0 也挂在 brvlan10 上。 </p><p>这样的配置其效果就是：  </p><blockquote><p>宿主机用软件实现了一个交换机（当然是虚拟的），上面定义了一个 VLAN10。<br>eth0.10，brvlan10 和 vnet0 都分别接到 VLAN10 的 Access口上。而 eth0 就是一个 Trunk 口。<br>VM1 通过 vnet0 发出来的数据包会被打上 VLAN10 的标签。  </p></blockquote><p>eth0.10 的作用是：定义了 VLAN10<br>brvlan10 的作用是：Bridge 上的其他网络设备自动加入到 VLAN10 中  </p><p>配置上图的实验环境后，测试KVM1和KVM2的连通性结果如下：<br><img src="https://i.loli.net/2018/06/19/5b28e7c40b35c.png" alt="snipaste_20180619_191904.png"></p><h3 id="Linux-Bridge-VLAN-虚拟交换机"><a href="#Linux-Bridge-VLAN-虚拟交换机" class="headerlink" title="Linux Bridge + VLAN = 虚拟交换机"></a>Linux Bridge + VLAN = 虚拟交换机</h3><p>现在对 KVM 的网络虚拟化做个总结。  </p><blockquote><p>1.物理交换机存在多个 VLAN，每个 VLAN 拥有多个端口。<br>同一 VLAN 端口之间可以交换转发，不同 VLAN 端口之间隔离。<br>所以交换机其包含两层功能：交换与隔离。<br>2.Linux 的 VLAN 设备实现的是隔离功能，但没有交换功能。<br>一个 VLAN 母设备（比如 eth0）不能拥有两个相同 ID 的 VLAN 子设备，因此也就不可能出现数据交换情况。<br>3.Linux Bridge 专门实现交换功能。将同一 VLAN 的子设备都挂载到一个 Bridge 上，设备之间就可以交换数据了。  </p></blockquote><p>总结起来，Linux Bridge 加 VLAN 在功能层面完整模拟现实世界里的二层交换机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个网络工程专业的大二学生，现在已经临近期末，也就是说马上就要大三了。最近身边的一些事，让我慢慢发现，如果以后只做一个普通的网工，只会敲敲命令行之类的，几乎没有什么前景，而且随着SDN、自动化运维的发展，普通网工的价值也显得越来越低，所以还是觉得应该学点别的东西来武装自
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://cyne.tk/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack" scheme="https://cyne.tk/tags/OpenStack/"/>
    
      <category term="网工" scheme="https://cyne.tk/tags/%E7%BD%91%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>基于阿卡信自建聊天服务器</title>
    <link href="https://cyne.tk/2018/06/03/%E5%9F%BA%E4%BA%8E%E9%98%BF%E5%8D%A1%E4%BF%A1%E8%87%AA%E5%BB%BA%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://cyne.tk/2018/06/03/基于阿卡信自建聊天服务器/</id>
    <published>2018-06-03T01:55:23.000Z</published>
    <updated>2018-06-03T02:46:34.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装JAVA和MAVEN环境"><a href="#一、安装JAVA和MAVEN环境" class="headerlink" title="一、安装JAVA和MAVEN环境"></a>一、安装JAVA和MAVEN环境</h1><p>这两个安装很简单，网上一大把的教程，因为我手头可用的只有一个Windows Server，所以这里只演示Win版的安装配置过程。</p><blockquote><p>①首先在<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre10-downloads-4417026.html" target="_blank" rel="noopener">ORACLE官网</a>下载jre，然后直接运行安装就可以。<br>②同样，在<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven官网</a>下载maven的压缩包，具体的安装配置过程可以参考CSDN博主的<a href="https://blog.csdn.net/h312387398/article/details/79136960" target="_blank" rel="noopener">教程</a>。<br>③安装成功后，在cmd命令行分别用一下两条命令测试是否正确安装配置：</p><blockquote><p>java -version<br>mvn -v</p></blockquote></blockquote><h1 id="二、安装Akaxin服务端程序"><a href="#二、安装Akaxin服务端程序" class="headerlink" title="二、安装Akaxin服务端程序"></a>二、安装Akaxin服务端程序</h1><p>在<a href="https://github.com/akaxincom/openzaly/blob/master/README.md" target="_blank" rel="noopener">Github</a>下载官方提供的jar包，并移动到C盘目录下，在cmd中首先切换到本目录：cd C:\ <img src="https://i.loli.net/2018/06/03/5b1352a48dbf1.png" alt="aaa.png"><br>然后直接运行jar包：java -jar openzaly-server.jar 然后看到提示就说明启动成功了。</p><h1 id="三、安装客户端程序连接使用"><a href="#三、安装客户端程序连接使用" class="headerlink" title="三、安装客户端程序连接使用"></a>三、安装客户端程序连接使用</h1><p>最后就是下载客户端程序了，在<a href="https://www.akaxin.com/" target="_blank" rel="noopener">官网</a>下载客户端程序后，输入服务器ip地址就可以正常使用了。<br><img src="https://i.loli.net/2018/06/03/5b1354ced508f.jpg" alt="QQ图片20180603103858.jpg">这里需要注意的是，首个成员需要输入邀请码：000000进入，这样就会默认成为站点的管理员并提供管理权限。</p><h1 id="四、问题"><a href="#四、问题" class="headerlink" title="四、问题"></a>四、问题</h1><p>我在配置完成之后遇到一个问题就是用客户端连接服务器的时候提示：请稍后重试，解决的办法是在服务器的安全组策略中放行：2021/2021端口。<br><img src="https://i.loli.net/2018/06/03/5b1355a46befb.png" alt="snipaste_20180603_104228.png"></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>阿卡信官网：<a href="https://www.akaxin.com/" target="_blank" rel="noopener">https://www.akaxin.com/</a><br>Github项目：<a href="https://github.com/akaxincom/openzaly" target="_blank" rel="noopener">https://github.com/akaxincom/openzaly</a><br>码云：<a href="https://gitee.com/akaxin/openzaly" target="_blank" rel="noopener">https://gitee.com/akaxin/openzaly</a><br>QQ群：655249600</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、安装JAVA和MAVEN环境&quot;&gt;&lt;a href=&quot;#一、安装JAVA和MAVEN环境&quot; class=&quot;headerlink&quot; title=&quot;一、安装JAVA和MAVEN环境&quot;&gt;&lt;/a&gt;一、安装JAVA和MAVEN环境&lt;/h1&gt;&lt;p&gt;这两个安装很简单，网上一大把
      
    
    </summary>
    
      <category term="Server" scheme="https://cyne.tk/categories/Server/"/>
    
    
      <category term="聊天服务器" scheme="https://cyne.tk/tags/%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="阿卡信" scheme="https://cyne.tk/tags/%E9%98%BF%E5%8D%A1%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>专治疑难杂症</title>
    <link href="https://cyne.tk/2018/05/30/%E4%B8%93%E6%B2%BB%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    <id>https://cyne.tk/2018/05/30/专治疑难杂症/</id>
    <published>2018-05-30T12:50:21.000Z</published>
    <updated>2018-05-31T13:53:47.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="显示器红斑"><a href="#显示器红斑" class="headerlink" title="显示器红斑"></a>显示器红斑</h1><p><img src="https://i.loli.net/2018/05/31/5b0ffadfde7b5.jpg" alt="红点.jpg"></p><blockquote><p>如图:前几天电脑出现过一小片红点，因为不太多，而且在换了一张桌面壁纸后就变好了，所以就没有在意。ps:之后百度有人说长时间显示一张照片会引起显示器出现问题，所以建议不要超长时间的用一张壁纸等。<br>当然这次的问题应该于此无关，当时是因为看了一个电影，复联3，在观看的过程中就出现了大量的红点，但是以为是视频的问题当时并没有注意，后来最小化后发现竟然到处都是。这就比较烦了，在坚持看完电影之后，我开始查找原因。<br>首先想到的是显卡的问题，因为红点的位置在每个背景下并不固定，所以初步排除显示器硬件的问题。我尝试用驱动精灵更新了驱动，并在几次重启之后依然没有好转。这就让我有点慌了，难道是显卡坏了？赶紧找来一个显示器插上，发现外接显示器显示正常。<br>这就有点奇怪了，我又联系三星的工程师远程，在他看了一些配置之后，并没有发现问题，但是他的一句话提醒了我：“硬件或者程序兼容性问题”，我就想着会不会是看电影导致的？赶紧重置了一下播放器的设置，结果红点就消失了。。。这就说明回退思想是多么的重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;显示器红斑&quot;&gt;&lt;a href=&quot;#显示器红斑&quot; class=&quot;headerlink&quot; title=&quot;显示器红斑&quot;&gt;&lt;/a&gt;显示器红斑&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/31/5b0ffadfde7b5.jpg&quot;
      
    
    </summary>
    
    
      <category term="电脑维护" scheme="https://cyne.tk/tags/%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>自建ssr服务器</title>
    <link href="https://cyne.tk/2018/05/07/%E8%87%AA%E5%BB%BAssr%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://cyne.tk/2018/05/07/自建ssr服务器/</id>
    <published>2018-05-07T13:09:20.000Z</published>
    <updated>2018-06-03T02:46:41.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VPS购买"><a href="#VPS购买" class="headerlink" title="VPS购买"></a>VPS购买</h1><p><img src="https://i.loli.net/2018/05/07/5af051641868c.png" alt="vpsAO">昨天晚上看见了一个便宜的VPS没怎么想就买了，毕竟3.5刀一年，虽然平时对富强上网需求不是特别大，但是想借着这个便宜主机了解一下SSR的搭建使用，所以这点钱花的还是很值的我自己觉得。当然便宜也就意味着配置不会好了，96M内存，不过做SSR足够了。</p><h1 id="SSR安装部署"><a href="#SSR安装部署" class="headerlink" title="SSR安装部署"></a>SSR安装部署</h1><p>在这之前就有过搭建SSR的想法，所以当时找了一个比较不错的教程，写的比较详细，毕竟搭建SSR还是比较傻瓜的，没什么难度，按照提示写参数就行，教程地址：<a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">点这里</a>。<br>唯一的一个遗憾就是我买的这个VPS不支持教程里说的谷歌BBR加速，而且不知道是不是因为这个原因，我做出来的这个SSR延迟还是比较高的。如图：<br><img src="https://i.loli.net/2018/05/07/5af0549490164.png" alt="网速测试.png"><br>当然，网速还是不太稳定的，下午测试的时候是1M左右，晚上就到6.9M了，不过这也都无所谓了。</p><h1 id="SSR客户端"><a href="#SSR客户端" class="headerlink" title="SSR客户端"></a>SSR客户端</h1><p>最后附上Win和Android端的客户端  </p><blockquote><p>Windows：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">下载地址</a><br>Android：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases/download/3.4.0.8/shadowsocksr-release.apk" target="_blank" rel="noopener">下载地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VPS购买&quot;&gt;&lt;a href=&quot;#VPS购买&quot; class=&quot;headerlink&quot; title=&quot;VPS购买&quot;&gt;&lt;/a&gt;VPS购买&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/07/5af051641868c.png&quot;
      
    
    </summary>
    
      <category term="Server" scheme="https://cyne.tk/categories/Server/"/>
    
    
      <category term="Server" scheme="https://cyne.tk/tags/Server/"/>
    
      <category term="SSR" scheme="https://cyne.tk/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>Python入门</title>
    <link href="https://cyne.tk/2018/04/10/Python%E5%85%A5%E9%97%A8/"/>
    <id>https://cyne.tk/2018/04/10/Python入门/</id>
    <published>2018-04-10T13:24:18.000Z</published>
    <updated>2018-04-10T13:24:18.190Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux入门</title>
    <link href="https://cyne.tk/2018/04/10/Linux%E5%85%A5%E9%97%A8/"/>
    <id>https://cyne.tk/2018/04/10/Linux入门/</id>
    <published>2018-04-10T13:19:22.000Z</published>
    <updated>2018-04-10T13:33:55.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><h2 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h2><blockquote><p>按ESC键 跳到命令模式，然后：</p></blockquote><blockquote><blockquote><p>:w   保存文件但不退出vi<br><em>:w file</em> 将修改另外保存到file中，不退出vi<br><em>:w!</em>   强制保存，不推出vi<br><em>:wq</em>  保存文件并退出vi<br><em>:wq!</em> 强制保存文件，并退出vi<br>_q:_  不保存文件，退出vi<br><em>:q!</em> 不保存文件，强制退出vi<br><em>:e!</em> 放弃所有修改，从上次保存文件开始再编辑  </p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VIM&quot;&gt;&lt;a href=&quot;#VIM&quot; class=&quot;headerlink&quot; title=&quot;VIM&quot;&gt;&lt;/a&gt;VIM&lt;/h1&gt;&lt;h2 id=&quot;保存退出&quot;&gt;&lt;a href=&quot;#保存退出&quot; class=&quot;headerlink&quot; title=&quot;保存退出&quot;&gt;&lt;/a&gt;保存退
      
    
    </summary>
    
      <category term="Linux" scheme="https://cyne.tk/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cyne.tk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python中的str.format</title>
    <link href="https://cyne.tk/2018/03/25/Python%E4%B8%AD%E7%9A%84str-format/"/>
    <id>https://cyne.tk/2018/03/25/Python中的str-format/</id>
    <published>2018-03-25T07:31:39.000Z</published>
    <updated>2018-03-25T10:20:09.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="str-format-的引入"><a href="#str-format-的引入" class="headerlink" title="str.format 的引入"></a>str.format 的引入</h1><p>在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不从心了。<br><br>例如，我们想打印这样一条记录：<br></p><blockquote></blockquote><pre><code>User:John has completed Action:payment at Time:13:30:00  </code></pre><p>如果使用加号实现，会是下面这种形式：<br></p><blockquote></blockquote><pre><code>print &quot;User:&quot; + user_name + &quot; has completed Action:&quot; + \ action_name + &quot; at Time:&quot; + current_time</code></pre><p>如果以后回过头来阅读这段代码，我们很难直观看出它的输出格式，且修改起来也相对麻烦。<br>我们可以换用 % 来实现：<br></p><blockquote></blockquote><pre><code>print &quot;User:%s has completed Action:%s at Time:%s&quot; %\ (user_name, action_name, current_time)</code></pre><p>这回代码变得清晰简洁多了。<br>不过，Python 为我们提供了另一种简洁优雅的实现方式，也是官方更加推荐的方式：<br><br>&nbsp;&nbsp;&nbsp;&nbsp;使用 str.format() 来实现字符串的格式化：</p><blockquote></blockquote><pre><code>print &quot;User:{} has completed Action:{} at Time:{}&quot;.format( user_name, action_name, current_time)</code></pre><p>str.format 既能够用于简单的场景，也能够胜任复杂的字符串替换，而无需繁琐的字符串连接操作。Python 的内置类型 str 和 unicode 均支持使用 str.format() 来格式化字符串。<br>我们接下来就详细地讨论 str.format() 的具体用法。</p><h1 id="str-format-基本语法"><a href="#str-format-基本语法" class="headerlink" title="str.format 基本语法"></a>str.format 基本语法</h1><p>格式化字符串使用花括号 {} 来包围替换字段，也就是待替换的字符串。而未被花括号包围的字符会原封不动地出现在结果中。</p><h2 id="使用位置索引"><a href="#使用位置索引" class="headerlink" title="使用位置索引"></a>使用位置索引</h2><p>以下两种写法是等价的：<br>“Hello, {} and {}!”.format(“John”, “Mary”)<br>“Hello, {0} and {1}!”.format(“John”, “Mary”)<br>花括号内部可以写上目标字符串的索引，也可以省略。如果省略，则按 format 括号里的目标字符串顺序依次替换。</p><h2 id="使用关键字索引"><a href="#使用关键字索引" class="headerlink" title="使用关键字索引"></a>使用关键字索引</h2><p>除了通过位置来指定目标字符串，我们还可以通过关键字来指定它。<br><br>例如：</p><blockquote></blockquote><p>“Hello, {boy} and {girl}!”.format(boy=”John”, girl=”Mary”)</p><p>使用关键字索引的好处是，我们无需关心参数的位置，且字符串的最终结果能够一目了然。在以后的代码维护中，我们能够快速地修改对应的参数，而不用对照字符串挨个去寻找相应的参数。<br>注意：如果字符串本身含有花括号，则需要将其重复两次来转义。例如，字符串本身含有 &#123; ，为了让 Python 知道这是一个普通字符，而不是用于包围替换字段的花括号，我们只需将它改写成 &#123;&#123; 即可。</p><h1 id="str-format-高级语法"><a href="#str-format-高级语法" class="headerlink" title="str.format 高级语法"></a>str.format 高级语法</h1><p>str.format 非常强大，足以完成日常工作中遇到的格式化输出。熟练掌握该方法，能够为以后的字符串处理打好基础，还能节省不少时间。</p><h2 id="访问参数的属性或元素"><a href="#访问参数的属性或元素" class="headerlink" title="访问参数的属性或元素"></a>访问参数的属性或元素</h2><p>在使用 str.format 来格式化字符串时，我们通常将目标字符串作为参数传递给 format 方法。实际上，我们还可以在格式化字符串中访问参数的某个属性或某个元素：</p><blockquote></blockquote><pre><code>&quot;My car is {0.color}.&quot;.format(black_car)&quot;The first student is {student[0]}.&quot;.format(student=stu_list)&quot;John is {d[john]} years old.&quot;.format(d=age_dict)</code></pre><h2 id="参数输出转换"><a href="#参数输出转换" class="headerlink" title="参数输出转换"></a>参数输出转换</h2><p>参数的字符串输出，默认是由其自身的 <strong>format</strong> 方法来实现的。也就是说<strong>Python</strong> 使用参数的 <strong>format</strong> 输出来取代替换字段。如果我们想调用 str() 或 repr() 来转换参数，可以通过添加转换标志来实现：</p><blockquote></blockquote><pre><code> call str() on argument&quot;It&apos;s a {0!s}.&quot;</code></pre><blockquote></blockquote><pre><code>call repr() on argument&quot;We can get info from {name!r}.&quot;</code></pre><h1 id="str-format-一般形式"><a href="#str-format-一般形式" class="headerlink" title="str.format 一般形式"></a>str.format 一般形式</h1><p>格式化字符串的一般形式如下：</p><blockquote></blockquote><pre><code>&quot;... {field_name!conversion:format_spec} ...&quot;</code></pre><p>从上面的代码可以看到，格式化字符串可分为 field_name、conversion、format_spec 三部分，分别对应替换字段名称（索引）、转换标志、格式描述。其中，字段名称是必选的，而后两者是可选的。转换标志紧跟在英文感叹号后面，而格式描述紧跟在英文冒号后面。<br><br>前面已经提到过，字段名称既可是位置索引，也可是关键字索引。字段名称后面可以通过点来访问属性，或通过方括号来访问元素。<br><br>在这里，我们重点看一下格式描述（format_spec）这一项。<br>格式描述中含有6个选项，分别是 fill、align、sign、width、precision、type。 它们的位置关系如下：</p><blockquote></blockquote><pre><code>[[fill]align][sign][#][0][width][,][.precision][type]</code></pre><blockquote><blockquote></blockquote><p>fill 可以是任意字符，默认为空格。<br><br>align 仅当指定最小宽度时有效。<br><br>&lt; 左对齐（默认选项）<br><br>“&gt;” 右对齐<br><br>= 仅对数字有效；将填充字符放到符号与数字间，例如 +0001234<br><br>^ 居中对齐<br><br>sign<br>仅对数字有效<br></p><ul><li>所有数字均带有符号<br></li></ul><ul><li>仅负数带有符号（默认选项）<br><br>&nbsp;即空格；正数前面带空格，负数前面带符号<br><br>‘#’ 只对整数有效<br>自动在二进制、八进制、十六进制数值前添加对应的 0b、0o、 0x。<br><br>‘,’<br>自动在每三个数字之间添加 , 分隔符。<br><br>width<br>十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。<br>如果没有指定对齐方式（align），那么可以在 width 前面添加一个0来实现自动填充0，等价于 fill 设为 0 并且 align 设为 =。<br><br>precision<br>用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。<br><br>type<br>确定参数类型，默认为 s ，即字符串。<br><br>整数输出类型：<blockquote><blockquote></blockquote><p>b：以二进制格式输出<br><br>c：将整数转换成对应的 unicode 字符<br><br>d：以十进制输出（默认选项）<br><br>o：以八进制输出<br><br>x：以十六进制小写输出<br><br>X：以十六进制大写输出<br><br>n：与 d 相同，但使用当前环境的分隔符来分隔每3位数字<br><br>十进制浮点数输出类型：<br><br>e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为6<br><br>E：与 e 相同，但使用大写 E 来表示指数部分<br><br>f：以定点形式输出数值，默认 precision 为6<br><br>F：与 f 相同<br><br>g：通用格式；对于给定的 precision p &gt;= 1，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）<br><br>G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分<br><br>n：与 g 相同，但使用当前环境的分隔符来分隔每3位数字<br><br>%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记</p></blockquote></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;str-format-的引入&quot;&gt;&lt;a href=&quot;#str-format-的引入&quot; class=&quot;headerlink&quot; title=&quot;str.format 的引入&quot;&gt;&lt;/a&gt;str.format 的引入&lt;/h1&gt;&lt;p&gt;在 Python 中，我们可以使用 + 来连
      
    
    </summary>
    
      <category term="Python" scheme="https://cyne.tk/categories/Python/"/>
    
    
      <category term="Python" scheme="https://cyne.tk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站记录</title>
    <link href="https://cyne.tk/2018/03/03/hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://cyne.tk/2018/03/03/hexo建站记录/</id>
    <published>2018-03-03T02:22:23.000Z</published>
    <updated>2018-03-25T11:38:16.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建站过程"><a href="#建站过程" class="headerlink" title="建站过程"></a>建站过程</h1><p>在遇到各种各样问题之后，终于搭建完成了这个博客。</p><blockquote><p>其实回过头看看也并不是很麻烦，只是遇到了许多问题，有些是因为设备环境的问题，比如在测试“ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>“这条命令时，一直提示”bad address“错误，让人很费解，重装环境重新来过还是报错，只好最后换了一台电脑就没有出现这个错误。当然经验证这个并不会影响整个博客的搭建，只要密钥复制的正确这些都不碍事。</p><p>还有一个问题是因为教程的问题，在修改主配置文件的“deploy”部署时，教程写的是https地址，我也是多次尝试也没成功，最后百度到原因写ssh地址就可以解决。当然也不能一概而论，若没有错误还是推荐使用https地址。</p></blockquote><p>一个个的小地方就让我走了不少的弯路。最后终于找到一个比较详细准确的教程，在此分享给大家，在这也感谢作者<a href="http://fanzhenyu.me/categories/Hexo/" target="_blank" rel="noopener">Line</a>, 无意侵犯作者原作，只是想让像我这样的小白少走些弯路。作者博客中有五篇关于hexo使用的教程，个人觉得比较适合小白看。</p><p>这就是这次建站的一些小心得，水平有限有什么说的不对的地方也感谢各位不吝赐教。</p><p>#后期添加：</p><blockquote><h2 id="一、添加网易云音乐插件"><a href="#一、添加网易云音乐插件" class="headerlink" title="一、添加网易云音乐插件"></a>一、添加网易云音乐插件</h2><blockquote><p><img src="https://i.loli.net/2018/03/10/5aa3e1773eb4d.png"><br>在别人的博客看到了这样一个音乐插件，实现很简单，打开<a href="http://music.163.com/#/outchain/0/2134628828/" target="_blank" rel="noopener">网易云音乐网页版</a>，选择自己想要分享的歌单，然后点击生成外链播放器即可，插件分为两种形式：iframe插件和flash插件，可根据情况选择。</p></blockquote></blockquote><blockquote><h2 id="二、添加particles-js背景动画"><a href="#二、添加particles-js背景动画" class="headerlink" title="二、添加particles.js背景动画"></a>二、添加particles.js背景动画</h2><blockquote><p><img src="https://i.loli.net/2018/03/11/5aa49a5ee0df1.jpg" alt="particles.js.jpg"><br>particles.js是一个粒子效果的js插件，在<a href="https://github.com/VincentGarreau/particles.js/" target="_blank" rel="noopener">Github</a>里可以找到这个项目的源码，但是百度了一下配置方法大多是在html中实现，反正我是小白，不知道怎么修改。回归正题，怎么在Hexo中实现particles.js效果呢？<br><br><strong>1.</strong>首先在<strong>\themes\next\layout\_layout.swig</strong>的<strong>&lt; /body &gt;</strong>标签上面添加</p></blockquote></blockquote><pre><code>{% if theme.canvas_nest %} <script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>{% endif %}</code></pre><blockquote><blockquote><p><strong>2.</strong>在<strong>\themes\next\_config.yml</strong>中添加以下字段开启此功能：</p></blockquote></blockquote><pre><code># background settings# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true</code></pre><blockquote><blockquote><p><strong>3.</strong>这样动态效果就添加成功了，你会发现博客默认的白色背景遮挡了大部分区域使得只有边缘能看见动态效果，这时候只要修改一下背景颜色即可。在<strong>\themes\next\source\css\_schemes\Pisces_layout.styl</strong>中，把<strong>.content-wrap</strong>中的<strong>background</strong>修改为<strong>none</strong>，注意我这里使用的是<strong>Pisces</strong>主题，如果你使用的是别的主题，在相应路径下修改即可。这样如果用手机打开体验会比较差，我们单独设置一下手机，把<strong>.content-wrap</strong>的<strong>+mobile()</strong>中的<strong>background</strong>修改为<strong>white</strong>，这样手机端的体验就好很多，却又不影响电脑端的炫酷动画。</p></blockquote></blockquote><blockquote><h2 id="三、设置文章摘要"><a href="#三、设置文章摘要" class="headerlink" title="三、设置文章摘要"></a>三、设置文章摘要</h2><blockquote><p>写出来的文章如果直接在首页全篇显示就比较别扭了，为了提高浏览体验，这时候就需要设置一下文章摘要了，我这里主要介绍三种方式。</p></blockquote></blockquote><blockquote><blockquote><p><strong>1.</strong>在文章中使用<font color="blue"><strong>&lt; !–more–&gt;</strong></font></p></blockquote></blockquote><blockquote><blockquote><p>这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。</p></blockquote></blockquote><blockquote><blockquote><p><strong>2.</strong>在文章中的<font color="blue"><strong>front-matter</strong></font>中添加<font color="blue"><strong>description</strong></font>，并提供文章摘录。如图：<br><img src="https://i.loli.net/2018/03/11/5aa4d99ca9490.png" alt="description.png"></p></blockquote></blockquote><blockquote><blockquote><p><strong>3.</strong>在主题配置文件中设置自动摘要</p></blockquote></blockquote><blockquote><blockquote></blockquote><pre><code>auto_excerpt:enable: truelength: 150 #默认摘要为150字，可根据需要更改</code></pre></blockquote><h1 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h1><blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档|Hexo</a><br><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a></p></blockquote><h1 id="错误汇总"><a href="#错误汇总" class="headerlink" title="错误汇总"></a>错误汇总</h1><p>在使用hexo博客的过程中，遇到了如下一些错误：</p><h2 id="123-125-引起的报错"><a href="#123-125-引起的报错" class="headerlink" title="&#123; &#125;引起的报错"></a>&#123; &#125;引起的报错</h2><p>今天写了一篇博客后按流程进行部署的时候，发现在生成静态页面的时候出现了如下的错误：<br><img src="https://i.loli.net/2018/03/25/5ab780018abe1.png" alt="snipaste_20180325_163706.png"></p><p><img src="https://i.loli.net/2018/03/25/5ab780018a55d.png" alt="snipaste_20180325_163648.png"></p><p>查了一下说什么的都有，每个方法也都试了一遍，最后发现是因为文章中直接引用了”&#123; &#125;”的原因，解决办法是将”&#123; &#125;”通过&amp;#123  &amp;#125后面加上分号”;”进行转换，就可以正常部署了。<br>这里也有一些常见的<a href="https://blog.csdn.net/chwshuang/article/details/52350551" target="_blank" rel="noopener">特殊字符</a>,可以根据需要转换。<br><img src="https://i.loli.net/2018/03/25/5ab786e34f254.png" alt="特殊字符.png"></p><h2 id="标题无法正常解析"><a href="#标题无法正常解析" class="headerlink" title="标题无法正常解析"></a>标题无法正常解析</h2><p>在浏览别人的博客的时候发现Hexo有自动解析目录的功能，是依靠markdown的标题实现的，在加了一个<strong>“#标题”</strong>这样时却发现博客无法解析到这是一个标题，查了一下原因是正规的标题写法是在”#”和标题之间加一个空格。</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>一开始刚刚接触markdown的时候一直用html的&#60;br/&#62;换行，这种换行方式貌似在换行的同时增加了行间距，无意间发现一个更好也更简单的换行方式，就是在要换行的位置敲两个空格，就可以换行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建站过程&quot;&gt;&lt;a href=&quot;#建站过程&quot; class=&quot;headerlink&quot; title=&quot;建站过程&quot;&gt;&lt;/a&gt;建站过程&lt;/h1&gt;&lt;p&gt;在遇到各种各样问题之后，终于搭建完成了这个博客。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实回过头看看也并不是很麻烦，只是
      
    
    </summary>
    
      <category term="Hexo" scheme="https://cyne.tk/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://cyne.tk/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="https://cyne.tk/tags/GitHub-Pages/"/>
    
      <category term="Blog" scheme="https://cyne.tk/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cyne.tk/2018/03/03/hello-world/"/>
    <id>https://cyne.tk/2018/03/03/hello-world/</id>
    <published>2018-03-03T01:44:18.605Z</published>
    <updated>2018-03-03T08:10:19.210Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://cyne.tk/tags/Hexo/"/>
    
  </entry>
  
</feed>
